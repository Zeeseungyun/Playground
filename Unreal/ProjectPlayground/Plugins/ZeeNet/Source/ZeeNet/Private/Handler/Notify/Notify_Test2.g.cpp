////////////////////////////////////////////////////////
// This file is generated by Zeenerator.
////////////////////////////////////////////////////////
#include "ZeeNetClient.h"
#include "ZeeNet/Public/Messages/Packet.h"
#include "ZeeNet/Private/ZeeNetMessageSerializerDef.h"
#include "ZeeNet/Private/Handler/NotifyDef.h"
#include "ZeeNet/Public/Interface/Handler/Notify/Test2.h" 

FZeeNetNotifyHandlerArray* FindNotifyHandler_Test2(int32 Point, TMap<FString, FZeeNetNotifyHandlerArray>& NotifyHandlers) { 
	switch (Point) { 
	case TZeeNetMapping_UnrealToPoint<FZeeNetTest2TestMessage5>::Point: [[fallthrough]]; 
	case TZeeNetMapping_UnrealToPoint<FZeeNetTest2TestMessage3>::Point: [[fallthrough]]; 
	case TZeeNetMapping_UnrealToPoint<FZeeNetTest2TestMessage4>::Point: [[fallthrough]]; 
	case TZeeNetMapping_UnrealToPoint<FZeeNetTest2TestMessage2>::Point: 
		return NotifyHandlers.Find(TEXT("Notify_Test2")); 
	default: break; 
	}

	return nullptr; 
}

bool ConsumeNotifyMessage_Test2(TSharedPtr<struct FZeeNetPacketSerializerBase> Packet, FZeeNetNotifyHandlerArray& NotifyHandlers) { 
	const int32 PacketPoint = Packet->GetHeader().Point; 
	switch (PacketPoint) { 
		ZEENET_CASE_CONSUME_NOTIFY(Test2, TestMessage5);
		ZEENET_CASE_CONSUME_NOTIFY(Test2, TestMessage3);
		ZEENET_CASE_CONSUME_NOTIFY(Test2, TestMessage4);
		ZEENET_CASE_CONSUME_NOTIFY(Test2, TestMessage2);
	default: break; 
	} 

	return false; 
}

