// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Data/Account.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Authentication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Authentication_2eproto;
namespace Zee {
namespace Proto {
namespace Authentication {
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Logout;
struct LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
}  // namespace Authentication
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> ::Zee::Proto::Authentication::Login* Arena::CreateMaybeMessage<::Zee::Proto::Authentication::Login>(Arena*);
template<> ::Zee::Proto::Authentication::Logout* Arena::CreateMaybeMessage<::Zee::Proto::Authentication::Logout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Zee {
namespace Proto {
namespace Authentication {

enum ReturnCode : int {
  RC_SUCCESSS = 0,
  RC_FAILED_LOGIN_DUPLICATED = 1,
  RC_FAILED_LOGIN_WRONG_PASSWORD = 2,
  RC_FAILED_LOGIN_CANT_CREATE_ACCOUNT = 3,
  ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReturnCode_IsValid(int value);
constexpr ReturnCode ReturnCode_MIN = RC_SUCCESSS;
constexpr ReturnCode ReturnCode_MAX = RC_FAILED_LOGIN_CANT_CREATE_ACCOUNT;
constexpr int ReturnCode_ARRAYSIZE = ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor();
template<typename T>
inline const std::string& ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReturnCode_descriptor(), enum_t_value);
}
inline bool ReturnCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReturnCode>(
    ReturnCode_descriptor(), name, value);
}
// ===================================================================

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Authentication.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit constexpr Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return new Login();
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Authentication.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kRCFieldNumber = 1,
  };
  // .Zee.Proto.Data.Account Account = 2;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::Zee::Proto::Data::Account& account() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Data::Account* release_account();
  ::Zee::Proto::Data::Account* mutable_account();
  void set_allocated_account(::Zee::Proto::Data::Account* account);
  private:
  const ::Zee::Proto::Data::Account& _internal_account() const;
  ::Zee::Proto::Data::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::Zee::Proto::Data::Account* account);
  ::Zee::Proto::Data::Account* unsafe_arena_release_account();

  // .Zee.Proto.Authentication.ReturnCode RC = 1;
  void clear_rc();
  ::Zee::Proto::Authentication::ReturnCode rc() const;
  void set_rc(::Zee::Proto::Authentication::ReturnCode value);
  private:
  ::Zee::Proto::Authentication::ReturnCode _internal_rc() const;
  void _internal_set_rc(::Zee::Proto::Authentication::ReturnCode value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Authentication.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Zee::Proto::Data::Account* account_;
  int rc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class Logout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Authentication.Logout) */ {
 public:
  inline Logout() : Logout(nullptr) {}
  ~Logout() override;
  explicit constexpr Logout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logout(const Logout& from);
  Logout(Logout&& from) noexcept
    : Logout() {
    *this = ::std::move(from);
  }

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout& operator=(Logout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Logout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Logout& a, Logout& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logout* New() const final {
    return new Logout();
  }

  Logout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Logout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Logout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Authentication.Logout";
  }
  protected:
  explicit Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUIDFieldNumber = 3,
    kRCFieldNumber = 1,
  };
  // string Id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 UID = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Zee.Proto.Authentication.ReturnCode RC = 1;
  void clear_rc();
  ::Zee::Proto::Authentication::ReturnCode rc() const;
  void set_rc(::Zee::Proto::Authentication::ReturnCode value);
  private:
  ::Zee::Proto::Authentication::ReturnCode _internal_rc() const;
  void _internal_set_rc(::Zee::Proto::Authentication::ReturnCode value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Authentication.Logout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  int rc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// .Zee.Proto.Authentication.ReturnCode RC = 1;
inline void Login::clear_rc() {
  rc_ = 0;
}
inline ::Zee::Proto::Authentication::ReturnCode Login::_internal_rc() const {
  return static_cast< ::Zee::Proto::Authentication::ReturnCode >(rc_);
}
inline ::Zee::Proto::Authentication::ReturnCode Login::rc() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Authentication.Login.RC)
  return _internal_rc();
}
inline void Login::_internal_set_rc(::Zee::Proto::Authentication::ReturnCode value) {
  
  rc_ = value;
}
inline void Login::set_rc(::Zee::Proto::Authentication::ReturnCode value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Authentication.Login.RC)
}

// .Zee.Proto.Data.Account Account = 2;
inline bool Login::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool Login::has_account() const {
  return _internal_has_account();
}
inline const ::Zee::Proto::Data::Account& Login::_internal_account() const {
  const ::Zee::Proto::Data::Account* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Data::Account&>(
      ::Zee::Proto::Data::_Account_default_instance_);
}
inline const ::Zee::Proto::Data::Account& Login::account() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Authentication.Login.Account)
  return _internal_account();
}
inline void Login::unsafe_arena_set_allocated_account(
    ::Zee::Proto::Data::Account* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Authentication.Login.Account)
}
inline ::Zee::Proto::Data::Account* Login::release_account() {
  
  ::Zee::Proto::Data::Account* temp = account_;
  account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Data::Account* Login::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Authentication.Login.Account)
  
  ::Zee::Proto::Data::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Data::Account* Login::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Data::Account>(GetArenaForAllocation());
    account_ = p;
  }
  return account_;
}
inline ::Zee::Proto::Data::Account* Login::mutable_account() {
  ::Zee::Proto::Data::Account* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Authentication.Login.Account)
  return _msg;
}
inline void Login::set_allocated_account(::Zee::Proto::Data::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account));
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Authentication.Login.Account)
}

// -------------------------------------------------------------------

// Logout

// .Zee.Proto.Authentication.ReturnCode RC = 1;
inline void Logout::clear_rc() {
  rc_ = 0;
}
inline ::Zee::Proto::Authentication::ReturnCode Logout::_internal_rc() const {
  return static_cast< ::Zee::Proto::Authentication::ReturnCode >(rc_);
}
inline ::Zee::Proto::Authentication::ReturnCode Logout::rc() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Authentication.Logout.RC)
  return _internal_rc();
}
inline void Logout::_internal_set_rc(::Zee::Proto::Authentication::ReturnCode value) {
  
  rc_ = value;
}
inline void Logout::set_rc(::Zee::Proto::Authentication::ReturnCode value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Authentication.Logout.RC)
}

// string Id = 2;
inline void Logout::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Logout::id() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Authentication.Logout.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Logout::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Zee.Proto.Authentication.Logout.Id)
}
inline std::string* Logout::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Authentication.Logout.Id)
  return _s;
}
inline const std::string& Logout::_internal_id() const {
  return id_.Get();
}
inline void Logout::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Logout::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Logout::release_id() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Authentication.Logout.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Logout::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Authentication.Logout.Id)
}

// int64 UID = 3;
inline void Logout::clear_uid() {
  uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Logout::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Logout::uid() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Authentication.Logout.UID)
  return _internal_uid();
}
inline void Logout::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void Logout::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Authentication.Logout.UID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Authentication
}  // namespace Proto
}  // namespace Zee

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Zee::Proto::Authentication::ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Zee::Proto::Authentication::ReturnCode>() {
  return ::Zee::Proto::Authentication::ReturnCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto
