#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Collection.proto

#include "Collection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Zee {
namespace Proto {
namespace Collection {
constexpr Collect::Collect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rc_(0)

  , id_(0){}
struct CollectDefaultTypeInternal {
  constexpr CollectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectDefaultTypeInternal() {}
  union {
    Collect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectDefaultTypeInternal _Collect_default_instance_;
constexpr Get::Get(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , _ids_cached_byte_size_(0){}
struct GetDefaultTypeInternal {
  constexpr GetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDefaultTypeInternal() {}
  union {
    Get _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDefaultTypeInternal _Get_default_instance_;
}  // namespace Collection
}  // namespace Proto
}  // namespace Zee
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Collection_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Collection_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Collection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Collection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Collection::Collect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Collection::Collect, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Collection::Collect, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Collection::Get, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Collection::Get, ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Zee::Proto::Collection::Collect)},
  { 8, -1, -1, sizeof(::Zee::Proto::Collection::Get)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Collection::_Collect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Collection::_Get_default_instance_),
};

const char descriptor_table_protodef_Collection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Collection.proto\022\024Zee.Proto.Collection"
  "\"C\n\007Collect\022,\n\002RC\030\001 \001(\0162 .Zee.Proto.Coll"
  "ection.ReturnCode\022\n\n\002Id\030\002 \001(\005\"\022\n\003Get\022\013\n\003"
  "Ids\030\001 \003(\005*T\n\nReturnCode\022\016\n\nRC_SUCCESS\020\000\022"
  "\025\n\021RC_FAILED_UNKNOWN\020\001\022\037\n\033RC_FAILED_ALRE"
  "ADY_COLLECTED\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Collection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Collection_2eproto = {
  false, false, 223, descriptor_table_protodef_Collection_2eproto, "Collection.proto", 
  &descriptor_table_Collection_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_Collection_2eproto::offsets,
  file_level_metadata_Collection_2eproto, file_level_enum_descriptors_Collection_2eproto, file_level_service_descriptors_Collection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Collection_2eproto_getter() {
  return &descriptor_table_Collection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Collection_2eproto(&descriptor_table_Collection_2eproto);
namespace Zee {
namespace Proto {
namespace Collection {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Collection_2eproto);
  return file_level_enum_descriptors_Collection_2eproto[0];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Collect::_Internal {
 public:
};

Collect::Collect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Collection.Collect)
}
Collect::Collect(const Collect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rc_, &from.rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&rc_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Collection.Collect)
}

void Collect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&rc_)) + sizeof(id_));
}

Collect::~Collect() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Collection.Collect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Collect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Collect::ArenaDtor(void* object) {
  Collect* _this = reinterpret_cast< Collect* >(object);
  (void)_this;
}
void Collect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collect::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Collection.Collect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&rc_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Collection.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::Collection::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 Id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Collection.Collect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Collection.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // int32 Id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Collection.Collect)
  return target;
}

size_t Collect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Collection.Collect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Collection.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  // int32 Id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Collect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collect::GetClassData() const { return &_class_data_; }

void Collect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Collect *>(to)->MergeFrom(
      static_cast<const Collect &>(from));
}


void Collect::MergeFrom(const Collect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Collection.Collect)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collect::CopyFrom(const Collect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Collection.Collect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collect::IsInitialized() const {
  return true;
}

void Collect::InternalSwap(Collect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collect, id_)
      + sizeof(Collect::id_)
      - PROTOBUF_FIELD_OFFSET(Collect, rc_)>(
          reinterpret_cast<char*>(&rc_),
          reinterpret_cast<char*>(&other->rc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Collection_2eproto_getter, &descriptor_table_Collection_2eproto_once,
      file_level_metadata_Collection_2eproto[0]);
}

// ===================================================================

class Get::_Internal {
 public:
};

Get::Get(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Collection.Get)
}
Get::Get(const Get& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Collection.Get)
}

void Get::SharedCtor() {
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Collection.Get)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Get::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Get::ArenaDtor(void* object) {
  Get* _this = reinterpret_cast< Get* >(object);
  (void)_this;
}
void Get::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Get::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Collection.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Get::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 Ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Get::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Collection.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Ids = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Collection.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Collection.Get)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Get::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Get::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Get::GetClassData() const { return &_class_data_; }

void Get::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Get *>(to)->MergeFrom(
      static_cast<const Get &>(from));
}


void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Collection.Get)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Collection.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::InternalSwap(Get* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Get::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Collection_2eproto_getter, &descriptor_table_Collection_2eproto_once,
      file_level_metadata_Collection_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Collection
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Zee::Proto::Collection::Collect* Arena::CreateMaybeMessage< ::Zee::Proto::Collection::Collect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Collection::Collect >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Collection::Get* Arena::CreateMaybeMessage< ::Zee::Proto::Collection::Get >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Collection::Get >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

