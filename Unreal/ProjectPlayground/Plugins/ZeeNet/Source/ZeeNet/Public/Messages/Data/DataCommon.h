////////////////////////////////////////////////////////
// This file is generated by Zeenerator.
////////////////////////////////////////////////////////
#pragma once
#include "CoreMinimal.h"
#include "ZeeNet/Public/ZeeNetPacketTraits.h"
#include "DataCommon.generated.h"

USTRUCT(BlueprintType) 
struct FZeeNetDataVector 
{ 
	GENERATED_BODY()

	UPROPERTY(BlueprintReadWrite) 
	float X = static_cast<float>(0); 

	UPROPERTY(BlueprintReadWrite) 
	float Y = static_cast<float>(0); 

	UPROPERTY(BlueprintReadWrite) 
	float Z = static_cast<float>(0); 

  ///for convert FVector
	operator FVector() const { return FVector{ X,Y,Z }; }
	FZeeNetDataVector& operator=(const FVector& InValue) { X = InValue.X; Y = InValue.Y; Z = InValue.Z; return *this; }

	FZeeNetDataVector& operator=(const FZeeNetDataVector&) = default;
	FZeeNetDataVector& operator=(FZeeNetDataVector&&) = default;
    FZeeNetDataVector(const FZeeNetDataVector&) = default;
	FZeeNetDataVector(FZeeNetDataVector&&) = default;
	FZeeNetDataVector(const FVector& InValue) : X(InValue.X), Y(InValue.Y), Z(InValue.Z) { }
	FZeeNetDataVector(FVector&& InValue): FZeeNetDataVector(InValue) { }
	FZeeNetDataVector() = default;
	~FZeeNetDataVector() = default;

}; 
template<> struct TZeeNetPacketTraits<FZeeNetDataVector> { static constexpr int32 Point = 0x8001; static constexpr bool bIsData = true; }; 

USTRUCT(BlueprintType) 
struct FZeeNetDataRotator 
{ 
	GENERATED_BODY()

	UPROPERTY(BlueprintReadWrite) 
	float Pitch = static_cast<float>(0); 

	UPROPERTY(BlueprintReadWrite) 
	float Yaw = static_cast<float>(0); 

	UPROPERTY(BlueprintReadWrite) 
	float Roll = static_cast<float>(0); 

  ///for convert FRotator
	operator FRotator() const { return FRotator{ Pitch, Yaw, Roll }; }
	operator FQuat() const { return FQuat(FRotator{ Pitch, Yaw, Roll }); }
	FZeeNetDataRotator& operator=(const FRotator& InValue) { Pitch = InValue.Pitch; Yaw = InValue.Yaw; Roll = InValue.Roll; return *this; }

	FZeeNetDataRotator& operator=(const FZeeNetDataRotator&) = default;
	FZeeNetDataRotator& operator=(FZeeNetDataRotator&&) = default;
	FZeeNetDataRotator(const FRotator& InValue) : Pitch(InValue.Pitch), Yaw(InValue.Yaw), Roll(InValue.Roll) { }
	FZeeNetDataRotator(FRotator&& InValue) : FZeeNetDataRotator(InValue) { }
	FZeeNetDataRotator(const FZeeNetDataRotator&) = default; 
	FZeeNetDataRotator(FZeeNetDataRotator&&) = default;
	FZeeNetDataRotator() = default;
	~FZeeNetDataRotator() = default;

}; 
template<> struct TZeeNetPacketTraits<FZeeNetDataRotator> { static constexpr int32 Point = 0x8002; static constexpr bool bIsData = true; }; 

USTRUCT(BlueprintType) 
struct FZeeNetDataPosition 
{ 
	GENERATED_BODY()

	UPROPERTY(BlueprintReadWrite) 
	int64 UID = static_cast<int64>(0); 

	UPROPERTY(BlueprintReadWrite) 
	FString MapName; 

	UPROPERTY(BlueprintReadWrite) 
	FZeeNetDataVector Pos; 

	UPROPERTY(BlueprintReadWrite) 
	FZeeNetDataRotator Rot; 

}; 
template<> struct TZeeNetPacketTraits<FZeeNetDataPosition> { static constexpr int32 Point = 0x8003; static constexpr bool bIsData = true; }; 

