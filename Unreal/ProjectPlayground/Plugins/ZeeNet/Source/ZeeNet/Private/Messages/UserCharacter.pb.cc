#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserCharacter.proto

#include "UserCharacter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Zee {
namespace Proto {
namespace UserCharacter {
constexpr Create::Create(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_(nullptr)
  , rc_(0)
{}
struct CreateDefaultTypeInternal {
  constexpr CreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDefaultTypeInternal() {}
  union {
    Create _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDefaultTypeInternal _Create_default_instance_;
constexpr Get::Get(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_()
  , user_(int64_t{0})
  , rc_(0)
{}
struct GetDefaultTypeInternal {
  constexpr GetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDefaultTypeInternal() {}
  union {
    Get _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDefaultTypeInternal _Get_default_instance_;
constexpr Select::Select(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_(nullptr)
  , toserver_(nullptr)
  , position_(nullptr)
  , rc_(0)
{}
struct SelectDefaultTypeInternal {
  constexpr SelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectDefaultTypeInternal() {}
  union {
    Select _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectDefaultTypeInternal _Select_default_instance_;
}  // namespace UserCharacter
}  // namespace Proto
}  // namespace Zee
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserCharacter_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_UserCharacter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UserCharacter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UserCharacter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Create, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Create, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Get, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Get, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Get, user_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Get, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, character_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, toserver_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, position_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::UserCharacter::Select, userip_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Zee::Proto::UserCharacter::Create)},
  { 8, -1, -1, sizeof(::Zee::Proto::UserCharacter::Get)},
  { 17, -1, -1, sizeof(::Zee::Proto::UserCharacter::Select)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::UserCharacter::_Create_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::UserCharacter::_Get_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::UserCharacter::_Select_default_instance_),
};

const char descriptor_table_protodef_UserCharacter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023UserCharacter.proto\022\027Zee.Proto.UserCha"
  "racter\032\030Data/DataCharacter.proto\032\027Data/D"
  "ataDedicate.proto\032\025Data/DataCommon.proto"
  "\"g\n\006Create\022/\n\002RC\030\001 \001(\0162#.Zee.Proto.UserC"
  "haracter.ReturnCode\022,\n\tCharacter\030\002 \001(\0132\031"
  ".Zee.Proto.Data.Character\"s\n\003Get\022/\n\002RC\030\001"
  " \001(\0162#.Zee.Proto.UserCharacter.ReturnCod"
  "e\022\014\n\004User\030\002 \001(\003\022-\n\nCharacters\030\003 \003(\0132\031.Ze"
  "e.Proto.Data.Character\"\325\001\n\006Select\022/\n\002RC\030"
  "\001 \001(\0162#.Zee.Proto.UserCharacter.ReturnCo"
  "de\022,\n\tCharacter\030\002 \001(\0132\031.Zee.Proto.Data.C"
  "haracter\0220\n\010ToServer\030\003 \001(\0132\036.Zee.Proto.D"
  "ata.DedicateServer\022*\n\010Position\030\004 \001(\0132\030.Z"
  "ee.Proto.Data.Position\022\016\n\006UserIp\030\005 \001(\t*Y"
  "\n\nReturnCode\022\016\n\nRC_SUCCESS\020\000\022\025\n\021RC_FAILE"
  "D_UNKNOWN\020\001\022$\n RC_FAILED_CREATE_DUPLICAT"
  "ED_NAME\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_UserCharacter_2eproto_deps[3] = {
  &::descriptor_table_Data_2fDataCharacter_2eproto,
  &::descriptor_table_Data_2fDataCommon_2eproto,
  &::descriptor_table_Data_2fDataDedicate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserCharacter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserCharacter_2eproto = {
  false, false, 657, descriptor_table_protodef_UserCharacter_2eproto, "UserCharacter.proto", 
  &descriptor_table_UserCharacter_2eproto_once, descriptor_table_UserCharacter_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_UserCharacter_2eproto::offsets,
  file_level_metadata_UserCharacter_2eproto, file_level_enum_descriptors_UserCharacter_2eproto, file_level_service_descriptors_UserCharacter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_UserCharacter_2eproto_getter() {
  return &descriptor_table_UserCharacter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UserCharacter_2eproto(&descriptor_table_UserCharacter_2eproto);
namespace Zee {
namespace Proto {
namespace UserCharacter {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserCharacter_2eproto);
  return file_level_enum_descriptors_UserCharacter_2eproto[0];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Create::_Internal {
 public:
  static const ::Zee::Proto::Data::Character& character(const Create* msg);
};

const ::Zee::Proto::Data::Character&
Create::_Internal::character(const Create* msg) {
  return *msg->character_;
}
void Create::clear_character() {
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
Create::Create(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.UserCharacter.Create)
}
Create::Create(const Create& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::Zee::Proto::Data::Character(*from.character_);
  } else {
    character_ = nullptr;
  }
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.UserCharacter.Create)
}

void Create::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&character_)) + sizeof(rc_));
}

Create::~Create() {
  // @@protoc_insertion_point(destructor:Zee.Proto.UserCharacter.Create)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Create::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete character_;
}

void Create::ArenaDtor(void* object) {
  Create* _this = reinterpret_cast< Create* >(object);
  (void)_this;
}
void Create::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Create::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.UserCharacter.Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  rc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Create::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::UserCharacter::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Character Character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Create::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.UserCharacter.Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::character(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.UserCharacter.Create)
  return target;
}

size_t Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.UserCharacter.Create)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Create::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Create::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Create::GetClassData() const { return &_class_data_; }

void Create::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Create *>(to)->MergeFrom(
      static_cast<const Create &>(from));
}


void Create::MergeFrom(const Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.UserCharacter.Create)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _internal_mutable_character()->::Zee::Proto::Data::Character::MergeFrom(from._internal_character());
  }
  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Create::CopyFrom(const Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.UserCharacter.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create::IsInitialized() const {
  return true;
}

void Create::InternalSwap(Create* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Create, rc_)
      + sizeof(Create::rc_)
      - PROTOBUF_FIELD_OFFSET(Create, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Create::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserCharacter_2eproto_getter, &descriptor_table_UserCharacter_2eproto_once,
      file_level_metadata_UserCharacter_2eproto[0]);
}

// ===================================================================

class Get::_Internal {
 public:
};

void Get::clear_characters() {
  characters_.Clear();
}
Get::Get(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  characters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.UserCharacter.Get)
}
Get::Get(const Get& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&user_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.UserCharacter.Get)
}

void Get::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&user_)) + sizeof(rc_));
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:Zee.Proto.UserCharacter.Get)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Get::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Get::ArenaDtor(void* object) {
  Get* _this = reinterpret_cast< Get* >(object);
  (void)_this;
}
void Get::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Get::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.UserCharacter.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&user_)) + sizeof(rc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Get::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::UserCharacter::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 User = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Zee.Proto.Data.Character Characters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Get::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.UserCharacter.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // int64 User = 2;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user(), target);
  }

  // repeated .Zee.Proto.Data.Character Characters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.UserCharacter.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.UserCharacter.Get)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Zee.Proto.Data.Character Characters = 3;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 User = 2;
  if (this->_internal_user() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user());
  }

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Get::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Get::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Get::GetClassData() const { return &_class_data_; }

void Get::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Get *>(to)->MergeFrom(
      static_cast<const Get &>(from));
}


void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.UserCharacter.Get)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  if (from._internal_user() != 0) {
    _internal_set_user(from._internal_user());
  }
  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.UserCharacter.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::InternalSwap(Get* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Get, rc_)
      + sizeof(Get::rc_)
      - PROTOBUF_FIELD_OFFSET(Get, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Get::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserCharacter_2eproto_getter, &descriptor_table_UserCharacter_2eproto_once,
      file_level_metadata_UserCharacter_2eproto[1]);
}

// ===================================================================

class Select::_Internal {
 public:
  static const ::Zee::Proto::Data::Character& character(const Select* msg);
  static const ::Zee::Proto::Data::DedicateServer& toserver(const Select* msg);
  static const ::Zee::Proto::Data::Position& position(const Select* msg);
};

const ::Zee::Proto::Data::Character&
Select::_Internal::character(const Select* msg) {
  return *msg->character_;
}
const ::Zee::Proto::Data::DedicateServer&
Select::_Internal::toserver(const Select* msg) {
  return *msg->toserver_;
}
const ::Zee::Proto::Data::Position&
Select::_Internal::position(const Select* msg) {
  return *msg->position_;
}
void Select::clear_character() {
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
void Select::clear_toserver() {
  if (GetArenaForAllocation() == nullptr && toserver_ != nullptr) {
    delete toserver_;
  }
  toserver_ = nullptr;
}
void Select::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Select::Select(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.UserCharacter.Select)
}
Select::Select(const Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userip().empty()) {
    userip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_character()) {
    character_ = new ::Zee::Proto::Data::Character(*from.character_);
  } else {
    character_ = nullptr;
  }
  if (from._internal_has_toserver()) {
    toserver_ = new ::Zee::Proto::Data::DedicateServer(*from.toserver_);
  } else {
    toserver_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Zee::Proto::Data::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.UserCharacter.Select)
}

void Select::SharedCtor() {
userip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&character_)) + sizeof(rc_));
}

Select::~Select() {
  // @@protoc_insertion_point(destructor:Zee.Proto.UserCharacter.Select)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Select::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_;
  if (this != internal_default_instance()) delete toserver_;
  if (this != internal_default_instance()) delete position_;
}

void Select::ArenaDtor(void* object) {
  Select* _this = reinterpret_cast< Select* >(object);
  (void)_this;
}
void Select::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Select::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.UserCharacter.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  if (GetArenaForAllocation() == nullptr && toserver_ != nullptr) {
    delete toserver_;
  }
  toserver_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  rc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Select::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::UserCharacter::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Character Character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.DedicateServer ToServer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_toserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Position Position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UserIp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_userip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Zee.Proto.UserCharacter.Select.UserIp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Select::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.UserCharacter.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::character(this), target, stream);
  }

  // .Zee.Proto.Data.DedicateServer ToServer = 3;
  if (this->_internal_has_toserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::toserver(this), target, stream);
  }

  // .Zee.Proto.Data.Position Position = 4;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // string UserIp = 5;
  if (!this->_internal_userip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userip().data(), static_cast<int>(this->_internal_userip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Zee.Proto.UserCharacter.Select.UserIp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_userip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.UserCharacter.Select)
  return target;
}

size_t Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.UserCharacter.Select)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UserIp = 5;
  if (!this->_internal_userip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userip());
  }

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .Zee.Proto.Data.DedicateServer ToServer = 3;
  if (this->_internal_has_toserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *toserver_);
  }

  // .Zee.Proto.Data.Position Position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Zee.Proto.UserCharacter.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Select::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Select::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Select::GetClassData() const { return &_class_data_; }

void Select::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Select *>(to)->MergeFrom(
      static_cast<const Select &>(from));
}


void Select::MergeFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.UserCharacter.Select)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userip().empty()) {
    _internal_set_userip(from._internal_userip());
  }
  if (from._internal_has_character()) {
    _internal_mutable_character()->::Zee::Proto::Data::Character::MergeFrom(from._internal_character());
  }
  if (from._internal_has_toserver()) {
    _internal_mutable_toserver()->::Zee::Proto::Data::DedicateServer::MergeFrom(from._internal_toserver());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::Zee::Proto::Data::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Select::CopyFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.UserCharacter.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Select::IsInitialized() const {
  return true;
}

void Select::InternalSwap(Select* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userip_, lhs_arena,
      &other->userip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Select, rc_)
      + sizeof(Select::rc_)
      - PROTOBUF_FIELD_OFFSET(Select, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Select::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserCharacter_2eproto_getter, &descriptor_table_UserCharacter_2eproto_once,
      file_level_metadata_UserCharacter_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserCharacter
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Zee::Proto::UserCharacter::Create* Arena::CreateMaybeMessage< ::Zee::Proto::UserCharacter::Create >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::UserCharacter::Create >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::UserCharacter::Get* Arena::CreateMaybeMessage< ::Zee::Proto::UserCharacter::Get >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::UserCharacter::Get >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::UserCharacter::Select* Arena::CreateMaybeMessage< ::Zee::Proto::UserCharacter::Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::UserCharacter::Select >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

