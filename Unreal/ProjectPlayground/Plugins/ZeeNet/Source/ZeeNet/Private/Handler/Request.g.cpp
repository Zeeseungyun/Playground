////////////////////////////////////////////////////////
// This file is generated by Zeenerator.
////////////////////////////////////////////////////////
#include "ZeeNetClient.h"
#include "ZeeNet/Public/Messages/Packet.h"
#include "ZeeNet/Private/ZeeNetMessageSerializerDef.h"
#include "ZeeNet/Public/Interface/Handler/ZeeNetRequestHandler.h"
#include "ZeeNet/Private/Handler/RequestDef.h"

extern FZeeNetRequestHandlerArray* FindRequestHandler_Authentication(int32 Point, TMap<const TCHAR*, FZeeNetRequestHandlerArray>& RequestHandlers); 
extern EZeeNetRequestHandlerResponse ConsumeRequestMessage_Authentication(TSharedPtr<struct FZeeNetPacketSerializerBase> Packet, FZeeNetRequestHandlerArray& RequestHandlers);

EZeeNetRequestHandlerResponse FZeeNetClient::ConsumeRequestMessage(TSharedPtr<struct FZeeNetPacketSerializerBase> Packet) { 
	CheckRequestHandlers(); 
	FZeeNetRequestHandlerArray* Found = nullptr; 

	Found = FindRequestHandler_Authentication(Packet->GetHeader().Point, RequestHandlers); 
	if (Found) { 
		if(Found->Num() > 0) return ConsumeRequestMessage_Authentication(Packet, *Found); 
		return EZeeNetRequestHandlerResponse::NoResponse; 
	}
	
	return EZeeNetRequestHandlerResponse::NoResponse;
}

void FZeeNetClient::BuildValidRequestHandlerNames() {
	ValidRequestHandlerNames.Add(TEXT("Request_Authentication")); 
	ValidRequestHandlerNames.Add(TEXT("Request_Chat")); 
	ValidRequestHandlerNames.Add(TEXT("Request_Test")); 
	ValidRequestHandlerNames.Add(TEXT("Request_Test2")); 

}
