#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dedicate.proto

#include "Dedicate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Zee {
namespace Proto {
namespace Dedicate {
constexpr Login::Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dedicateserver_(nullptr)
  , rc_(0)
{}
struct LoginDefaultTypeInternal {
  constexpr LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginDefaultTypeInternal() {}
  union {
    Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginDefaultTypeInternal _Login_default_instance_;
constexpr Move::Move(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_(nullptr)
  , toserver_(nullptr)
  , position_(nullptr)
  , rc_(0)
{}
struct MoveDefaultTypeInternal {
  constexpr MoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDefaultTypeInternal _Move_default_instance_;
constexpr Leave::Leave(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_(nullptr)
  , position_(nullptr){}
struct LeaveDefaultTypeInternal {
  constexpr LeaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaveDefaultTypeInternal() {}
  union {
    Leave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaveDefaultTypeInternal _Leave_default_instance_;
}  // namespace Dedicate
}  // namespace Proto
}  // namespace Zee
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Dedicate_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Dedicate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Dedicate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Dedicate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Login, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Login, dedicateserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, rc_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, character_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, toserver_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, position_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Move, userip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Leave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Leave, character_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Dedicate::Leave, position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Zee::Proto::Dedicate::Login)},
  { 8, -1, -1, sizeof(::Zee::Proto::Dedicate::Move)},
  { 19, -1, -1, sizeof(::Zee::Proto::Dedicate::Leave)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Dedicate::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Dedicate::_Move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Dedicate::_Leave_default_instance_),
};

const char descriptor_table_protodef_Dedicate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Dedicate.proto\022\022Zee.Proto.Dedicate\032\027Da"
  "ta/DataDedicate.proto\032\030Data/DataCharacte"
  "r.proto\032\025Data/DataCommon.proto\"k\n\005Login\022"
  "*\n\002RC\030\001 \001(\0162\036.Zee.Proto.Dedicate.ReturnC"
  "ode\0226\n\016DedicateServer\030\002 \001(\0132\036.Zee.Proto."
  "Data.DedicateServer\"\316\001\n\004Move\022*\n\002RC\030\001 \001(\016"
  "2\036.Zee.Proto.Dedicate.ReturnCode\022,\n\tChar"
  "acter\030\002 \001(\0132\031.Zee.Proto.Data.Character\0220"
  "\n\010ToServer\030\003 \001(\0132\036.Zee.Proto.Data.Dedica"
  "teServer\022*\n\010Position\030\004 \001(\0132\030.Zee.Proto.D"
  "ata.Position\022\016\n\006UserIp\030\005 \001(\t\"a\n\005Leave\022,\n"
  "\tCharacter\030\001 \001(\0132\031.Zee.Proto.Data.Charac"
  "ter\022*\n\010Position\030\002 \001(\0132\030.Zee.Proto.Data.P"
  "osition*Q\n\nReturnCode\022\016\n\nRC_SUCCESS\020\000\022\025\n"
  "\021RC_FAILED_UNKNOWN\020\001\022\034\n\030RC_FAILED_DEDI_N"
  "OT_FOUND\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Dedicate_2eproto_deps[3] = {
  &::descriptor_table_Data_2fDataCharacter_2eproto,
  &::descriptor_table_Data_2fDataCommon_2eproto,
  &::descriptor_table_Data_2fDataDedicate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Dedicate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Dedicate_2eproto = {
  false, false, 618, descriptor_table_protodef_Dedicate_2eproto, "Dedicate.proto", 
  &descriptor_table_Dedicate_2eproto_once, descriptor_table_Dedicate_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_Dedicate_2eproto::offsets,
  file_level_metadata_Dedicate_2eproto, file_level_enum_descriptors_Dedicate_2eproto, file_level_service_descriptors_Dedicate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Dedicate_2eproto_getter() {
  return &descriptor_table_Dedicate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Dedicate_2eproto(&descriptor_table_Dedicate_2eproto);
namespace Zee {
namespace Proto {
namespace Dedicate {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Dedicate_2eproto);
  return file_level_enum_descriptors_Dedicate_2eproto[0];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Login::_Internal {
 public:
  static const ::Zee::Proto::Data::DedicateServer& dedicateserver(const Login* msg);
};

const ::Zee::Proto::Data::DedicateServer&
Login::_Internal::dedicateserver(const Login* msg) {
  return *msg->dedicateserver_;
}
void Login::clear_dedicateserver() {
  if (GetArenaForAllocation() == nullptr && dedicateserver_ != nullptr) {
    delete dedicateserver_;
  }
  dedicateserver_ = nullptr;
}
Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Dedicate.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dedicateserver()) {
    dedicateserver_ = new ::Zee::Proto::Data::DedicateServer(*from.dedicateserver_);
  } else {
    dedicateserver_ = nullptr;
  }
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Dedicate.Login)
}

void Login::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dedicateserver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&dedicateserver_)) + sizeof(rc_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Dedicate.Login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dedicateserver_;
}

void Login::ArenaDtor(void* object) {
  Login* _this = reinterpret_cast< Login* >(object);
  (void)_this;
}
void Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Dedicate.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && dedicateserver_ != nullptr) {
    delete dedicateserver_;
  }
  dedicateserver_ = nullptr;
  rc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Dedicate.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::Dedicate::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.DedicateServer DedicateServer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dedicateserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Dedicate.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Dedicate.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // .Zee.Proto.Data.DedicateServer DedicateServer = 2;
  if (this->_internal_has_dedicateserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dedicateserver(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Dedicate.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Dedicate.Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Data.DedicateServer DedicateServer = 2;
  if (this->_internal_has_dedicateserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dedicateserver_);
  }

  // .Zee.Proto.Dedicate.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login::GetClassData() const { return &_class_data_; }

void Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Login *>(to)->MergeFrom(
      static_cast<const Login &>(from));
}


void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Dedicate.Login)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dedicateserver()) {
    _internal_mutable_dedicateserver()->::Zee::Proto::Data::DedicateServer::MergeFrom(from._internal_dedicateserver());
  }
  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Dedicate.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Login, rc_)
      + sizeof(Login::rc_)
      - PROTOBUF_FIELD_OFFSET(Login, dedicateserver_)>(
          reinterpret_cast<char*>(&dedicateserver_),
          reinterpret_cast<char*>(&other->dedicateserver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dedicate_2eproto_getter, &descriptor_table_Dedicate_2eproto_once,
      file_level_metadata_Dedicate_2eproto[0]);
}

// ===================================================================

class Move::_Internal {
 public:
  static const ::Zee::Proto::Data::Character& character(const Move* msg);
  static const ::Zee::Proto::Data::DedicateServer& toserver(const Move* msg);
  static const ::Zee::Proto::Data::Position& position(const Move* msg);
};

const ::Zee::Proto::Data::Character&
Move::_Internal::character(const Move* msg) {
  return *msg->character_;
}
const ::Zee::Proto::Data::DedicateServer&
Move::_Internal::toserver(const Move* msg) {
  return *msg->toserver_;
}
const ::Zee::Proto::Data::Position&
Move::_Internal::position(const Move* msg) {
  return *msg->position_;
}
void Move::clear_character() {
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
void Move::clear_toserver() {
  if (GetArenaForAllocation() == nullptr && toserver_ != nullptr) {
    delete toserver_;
  }
  toserver_ = nullptr;
}
void Move::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Move::Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Dedicate.Move)
}
Move::Move(const Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userip().empty()) {
    userip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_character()) {
    character_ = new ::Zee::Proto::Data::Character(*from.character_);
  } else {
    character_ = nullptr;
  }
  if (from._internal_has_toserver()) {
    toserver_ = new ::Zee::Proto::Data::DedicateServer(*from.toserver_);
  } else {
    toserver_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Zee::Proto::Data::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Dedicate.Move)
}

void Move::SharedCtor() {
userip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&character_)) + sizeof(rc_));
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Dedicate.Move)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_;
  if (this != internal_default_instance()) delete toserver_;
  if (this != internal_default_instance()) delete position_;
}

void Move::ArenaDtor(void* object) {
  Move* _this = reinterpret_cast< Move* >(object);
  (void)_this;
}
void Move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Dedicate.Move)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  if (GetArenaForAllocation() == nullptr && toserver_ != nullptr) {
    delete toserver_;
  }
  toserver_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  rc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Dedicate.ReturnCode RC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::Zee::Proto::Dedicate::ReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Character Character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.DedicateServer ToServer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_toserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Position Position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UserIp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_userip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Zee.Proto.Dedicate.Move.UserIp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Move::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Dedicate.Move)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Dedicate.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::character(this), target, stream);
  }

  // .Zee.Proto.Data.DedicateServer ToServer = 3;
  if (this->_internal_has_toserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::toserver(this), target, stream);
  }

  // .Zee.Proto.Data.Position Position = 4;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // string UserIp = 5;
  if (!this->_internal_userip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userip().data(), static_cast<int>(this->_internal_userip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Zee.Proto.Dedicate.Move.UserIp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_userip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Dedicate.Move)
  return target;
}

size_t Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Dedicate.Move)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UserIp = 5;
  if (!this->_internal_userip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userip());
  }

  // .Zee.Proto.Data.Character Character = 2;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .Zee.Proto.Data.DedicateServer ToServer = 3;
  if (this->_internal_has_toserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *toserver_);
  }

  // .Zee.Proto.Data.Position Position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Zee.Proto.Dedicate.ReturnCode RC = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Move::GetClassData() const { return &_class_data_; }

void Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Move *>(to)->MergeFrom(
      static_cast<const Move &>(from));
}


void Move::MergeFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Dedicate.Move)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userip().empty()) {
    _internal_set_userip(from._internal_userip());
  }
  if (from._internal_has_character()) {
    _internal_mutable_character()->::Zee::Proto::Data::Character::MergeFrom(from._internal_character());
  }
  if (from._internal_has_toserver()) {
    _internal_mutable_toserver()->::Zee::Proto::Data::DedicateServer::MergeFrom(from._internal_toserver());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::Zee::Proto::Data::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Dedicate.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  return true;
}

void Move::InternalSwap(Move* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userip_, lhs_arena,
      &other->userip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, rc_)
      + sizeof(Move::rc_)
      - PROTOBUF_FIELD_OFFSET(Move, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Move::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dedicate_2eproto_getter, &descriptor_table_Dedicate_2eproto_once,
      file_level_metadata_Dedicate_2eproto[1]);
}

// ===================================================================

class Leave::_Internal {
 public:
  static const ::Zee::Proto::Data::Character& character(const Leave* msg);
  static const ::Zee::Proto::Data::Position& position(const Leave* msg);
};

const ::Zee::Proto::Data::Character&
Leave::_Internal::character(const Leave* msg) {
  return *msg->character_;
}
const ::Zee::Proto::Data::Position&
Leave::_Internal::position(const Leave* msg) {
  return *msg->position_;
}
void Leave::clear_character() {
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
void Leave::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Leave::Leave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Dedicate.Leave)
}
Leave::Leave(const Leave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::Zee::Proto::Data::Character(*from.character_);
  } else {
    character_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Zee::Proto::Data::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Dedicate.Leave)
}

void Leave::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&character_)) + sizeof(position_));
}

Leave::~Leave() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Dedicate.Leave)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Leave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete character_;
  if (this != internal_default_instance()) delete position_;
}

void Leave::ArenaDtor(void* object) {
  Leave* _this = reinterpret_cast< Leave* >(object);
  (void)_this;
}
void Leave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Leave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Leave::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Dedicate.Leave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Leave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Data.Character Character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Data.Position Position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Leave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Dedicate.Leave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Data.Character Character = 1;
  if (this->_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::character(this), target, stream);
  }

  // .Zee.Proto.Data.Position Position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Dedicate.Leave)
  return target;
}

size_t Leave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Dedicate.Leave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Data.Character Character = 1;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .Zee.Proto.Data.Position Position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Leave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Leave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Leave::GetClassData() const { return &_class_data_; }

void Leave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Leave *>(to)->MergeFrom(
      static_cast<const Leave &>(from));
}


void Leave::MergeFrom(const Leave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Dedicate.Leave)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _internal_mutable_character()->::Zee::Proto::Data::Character::MergeFrom(from._internal_character());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::Zee::Proto::Data::Position::MergeFrom(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Leave::CopyFrom(const Leave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Dedicate.Leave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leave::IsInitialized() const {
  return true;
}

void Leave::InternalSwap(Leave* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Leave, position_)
      + sizeof(Leave::position_)
      - PROTOBUF_FIELD_OFFSET(Leave, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Leave::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dedicate_2eproto_getter, &descriptor_table_Dedicate_2eproto_once,
      file_level_metadata_Dedicate_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Dedicate
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Zee::Proto::Dedicate::Login* Arena::CreateMaybeMessage< ::Zee::Proto::Dedicate::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Dedicate::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Dedicate::Move* Arena::CreateMaybeMessage< ::Zee::Proto::Dedicate::Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Dedicate::Move >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Dedicate::Leave* Arena::CreateMaybeMessage< ::Zee::Proto::Dedicate::Leave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Dedicate::Leave >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

