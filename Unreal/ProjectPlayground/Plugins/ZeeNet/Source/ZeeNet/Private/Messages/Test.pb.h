// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Test_2eproto;
namespace Zee {
namespace Proto {
namespace Test {
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace Test
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> ::Zee::Proto::Test::TestMessage* Arena::CreateMaybeMessage<::Zee::Proto::Test::TestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Zee {
namespace Proto {
namespace Test {

enum ReturnCode : int {
  RC_SUCCESSS = 0,
  ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReturnCode_IsValid(int value);
constexpr ReturnCode ReturnCode_MIN = RC_SUCCESSS;
constexpr ReturnCode ReturnCode_MAX = RC_SUCCESSS;
constexpr int ReturnCode_ARRAYSIZE = ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor();
template<typename T>
inline const std::string& ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReturnCode_descriptor(), enum_t_value);
}
inline bool ReturnCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReturnCode>(
    ReturnCode_descriptor(), name, value);
}
// ===================================================================

class TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Test.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() override;
  explicit constexpr TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage* New() const final {
    return new TestMessage();
  }

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Test.TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRCFieldNumber = 1,
    kRCListsFieldNumber = 2,
    kIdFieldNumber = 3,
    kContentFieldNumber = 4,
  };
  // repeated int32 RC = 1;
  int rc_size() const;
  private:
  int _internal_rc_size() const;
  public:
  void clear_rc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rc() const;
  void _internal_add_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 rc(int index) const;
  void set_rc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      rc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rc();

  // repeated .Zee.Proto.Test.ReturnCode RCLists = 2;
  int rclists_size() const;
  private:
  int _internal_rclists_size() const;
  public:
  void clear_rclists();
  private:
  ::Zee::Proto::Test::ReturnCode _internal_rclists(int index) const;
  void _internal_add_rclists(::Zee::Proto::Test::ReturnCode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_rclists();
  public:
  ::Zee::Proto::Test::ReturnCode rclists(int index) const;
  void set_rclists(int index, ::Zee::Proto::Test::ReturnCode value);
  void add_rclists(::Zee::Proto::Test::ReturnCode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& rclists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_rclists();

  // string Id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Test.TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > rc_;
  mutable std::atomic<int> _rc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> rclists_;
  mutable std::atomic<int> _rclists_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage

// repeated int32 RC = 1;
inline int TestMessage::_internal_rc_size() const {
  return rc_.size();
}
inline int TestMessage::rc_size() const {
  return _internal_rc_size();
}
inline void TestMessage::clear_rc() {
  rc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::_internal_rc(int index) const {
  return rc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::rc(int index) const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test.TestMessage.RC)
  return _internal_rc(index);
}
inline void TestMessage::set_rc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  rc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Test.TestMessage.RC)
}
inline void TestMessage::_internal_add_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rc_.Add(value);
}
inline void TestMessage::add_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_rc(value);
  // @@protoc_insertion_point(field_add:Zee.Proto.Test.TestMessage.RC)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage::_internal_rc() const {
  return rc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage::rc() const {
  // @@protoc_insertion_point(field_list:Zee.Proto.Test.TestMessage.RC)
  return _internal_rc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage::_internal_mutable_rc() {
  return &rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage::mutable_rc() {
  // @@protoc_insertion_point(field_mutable_list:Zee.Proto.Test.TestMessage.RC)
  return _internal_mutable_rc();
}

// repeated .Zee.Proto.Test.ReturnCode RCLists = 2;
inline int TestMessage::_internal_rclists_size() const {
  return rclists_.size();
}
inline int TestMessage::rclists_size() const {
  return _internal_rclists_size();
}
inline void TestMessage::clear_rclists() {
  rclists_.Clear();
}
inline ::Zee::Proto::Test::ReturnCode TestMessage::_internal_rclists(int index) const {
  return static_cast< ::Zee::Proto::Test::ReturnCode >(rclists_.Get(index));
}
inline ::Zee::Proto::Test::ReturnCode TestMessage::rclists(int index) const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test.TestMessage.RCLists)
  return _internal_rclists(index);
}
inline void TestMessage::set_rclists(int index, ::Zee::Proto::Test::ReturnCode value) {
  rclists_.Set(index, value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Test.TestMessage.RCLists)
}
inline void TestMessage::_internal_add_rclists(::Zee::Proto::Test::ReturnCode value) {
  rclists_.Add(value);
}
inline void TestMessage::add_rclists(::Zee::Proto::Test::ReturnCode value) {
  _internal_add_rclists(value);
  // @@protoc_insertion_point(field_add:Zee.Proto.Test.TestMessage.RCLists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestMessage::rclists() const {
  // @@protoc_insertion_point(field_list:Zee.Proto.Test.TestMessage.RCLists)
  return rclists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestMessage::_internal_mutable_rclists() {
  return &rclists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestMessage::mutable_rclists() {
  // @@protoc_insertion_point(field_mutable_list:Zee.Proto.Test.TestMessage.RCLists)
  return _internal_mutable_rclists();
}

// string Id = 3;
inline void TestMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TestMessage::id() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test.TestMessage.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Zee.Proto.Test.TestMessage.Id)
}
inline std::string* TestMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test.TestMessage.Id)
  return _s;
}
inline const std::string& TestMessage::_internal_id() const {
  return id_.Get();
}
inline void TestMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_id() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test.TestMessage.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test.TestMessage.Id)
}

// string Content = 4;
inline void TestMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TestMessage::content() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test.TestMessage.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Zee.Proto.Test.TestMessage.Content)
}
inline std::string* TestMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test.TestMessage.Content)
  return _s;
}
inline const std::string& TestMessage::_internal_content() const {
  return content_.Get();
}
inline void TestMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_content() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test.TestMessage.Content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test.TestMessage.Content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Test
}  // namespace Proto
}  // namespace Zee

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Zee::Proto::Test::ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Zee::Proto::Test::ReturnCode>() {
  return ::Zee::Proto::Test::ReturnCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Test_2eproto
