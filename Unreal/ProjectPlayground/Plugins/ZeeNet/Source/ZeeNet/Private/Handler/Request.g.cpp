////////////////////////////////////////////////////////
// This file is generated by Zeenerator.
////////////////////////////////////////////////////////
#include "ZeeNetClient.h"
#include "ZeeNet/Public/Messages/Packet.h"
#include "ZeeNet/Private/ZeeNetMessageSerializerDef.h"
#include "ZeeNet/Public/Interface/Handler/ZeeNetRequestHandler.h"
#include "ZeeNet/Private/Handler/RequestDef.h"

extern FZeeNetRequestHandlerArray* FindRequestHandler_Authentication(int32 Point, TMap<FString, FZeeNetRequestHandlerArray>& RequestHandlers); 
extern EZeeNetRequestHandlerResponse ConsumeRequestMessage_Authentication(
	TSharedPtr<IZeeNetResponser> Responser
	, TSharedPtr<struct FZeeNetPacketSerializerBase> Packet
	, FZeeNetRequestHandlerArray& RequestHandlers
); 
extern FZeeNetRequestHandlerArray* FindRequestHandler_Collection(int32 Point, TMap<FString, FZeeNetRequestHandlerArray>& RequestHandlers); 
extern EZeeNetRequestHandlerResponse ConsumeRequestMessage_Collection(
	TSharedPtr<IZeeNetResponser> Responser
	, TSharedPtr<struct FZeeNetPacketSerializerBase> Packet
	, FZeeNetRequestHandlerArray& RequestHandlers
); 
extern FZeeNetRequestHandlerArray* FindRequestHandler_Dedicate(int32 Point, TMap<FString, FZeeNetRequestHandlerArray>& RequestHandlers); 
extern EZeeNetRequestHandlerResponse ConsumeRequestMessage_Dedicate(
	TSharedPtr<IZeeNetResponser> Responser
	, TSharedPtr<struct FZeeNetPacketSerializerBase> Packet
	, FZeeNetRequestHandlerArray& RequestHandlers
); 
extern FZeeNetRequestHandlerArray* FindRequestHandler_UserCharacter(int32 Point, TMap<FString, FZeeNetRequestHandlerArray>& RequestHandlers); 
extern EZeeNetRequestHandlerResponse ConsumeRequestMessage_UserCharacter(
	TSharedPtr<IZeeNetResponser> Responser
	, TSharedPtr<struct FZeeNetPacketSerializerBase> Packet
	, FZeeNetRequestHandlerArray& RequestHandlers
); 

EZeeNetRequestHandlerResponse FZeeNetClient::ConsumeRequestMessage(TSharedPtr<struct FZeeNetPacketSerializerBase> Packet) { 
	ValidateRequestHandlers(); 
	FZeeNetRequestHandlerArray* Found = nullptr; 
	TSharedPtr<IZeeNetResponser> Responser = StaticCastSharedPtr<IZeeNetResponser>(AsShared().ToSharedPtr()); 

	Found = FindRequestHandler_Authentication(Packet->GetHeader().Point, RequestHandlers); 
	if (Found) { 
		if (Found->Num() > 0) return ConsumeRequestMessage_Authentication(Responser, Packet, *Found); 
		return EZeeNetRequestHandlerResponse::NoResponse; 
	}

	Found = FindRequestHandler_Collection(Packet->GetHeader().Point, RequestHandlers); 
	if (Found) { 
		if (Found->Num() > 0) return ConsumeRequestMessage_Collection(Responser, Packet, *Found); 
		return EZeeNetRequestHandlerResponse::NoResponse; 
	}

	Found = FindRequestHandler_Dedicate(Packet->GetHeader().Point, RequestHandlers); 
	if (Found) { 
		if (Found->Num() > 0) return ConsumeRequestMessage_Dedicate(Responser, Packet, *Found); 
		return EZeeNetRequestHandlerResponse::NoResponse; 
	}

	Found = FindRequestHandler_UserCharacter(Packet->GetHeader().Point, RequestHandlers); 
	if (Found) { 
		if (Found->Num() > 0) return ConsumeRequestMessage_UserCharacter(Responser, Packet, *Found); 
		return EZeeNetRequestHandlerResponse::NoResponse; 
	}

	return EZeeNetRequestHandlerResponse::NoResponse;
}

void FZeeNetClient::BuildValidRequestHandlerNames() {
	ValidRequestHandlerNames.Add(TEXT("Request_Authentication")); 
	ValidRequestHandlerNames.Add(TEXT("Request_Collection")); 
	ValidRequestHandlerNames.Add(TEXT("Request_Dedicate")); 
	ValidRequestHandlerNames.Add(TEXT("Request_UserCharacter")); 

}

