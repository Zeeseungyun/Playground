// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Test2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Test2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Test2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Test2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Test2_2eproto;
namespace Zee {
namespace Proto {
namespace Test2 {
class TestMessage2;
struct TestMessage2DefaultTypeInternal;
extern TestMessage2DefaultTypeInternal _TestMessage2_default_instance_;
class TestMessage3;
struct TestMessage3DefaultTypeInternal;
extern TestMessage3DefaultTypeInternal _TestMessage3_default_instance_;
class TestMessage4;
struct TestMessage4DefaultTypeInternal;
extern TestMessage4DefaultTypeInternal _TestMessage4_default_instance_;
class TestMessage5;
struct TestMessage5DefaultTypeInternal;
extern TestMessage5DefaultTypeInternal _TestMessage5_default_instance_;
}  // namespace Test2
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> ::Zee::Proto::Test2::TestMessage2* Arena::CreateMaybeMessage<::Zee::Proto::Test2::TestMessage2>(Arena*);
template<> ::Zee::Proto::Test2::TestMessage3* Arena::CreateMaybeMessage<::Zee::Proto::Test2::TestMessage3>(Arena*);
template<> ::Zee::Proto::Test2::TestMessage4* Arena::CreateMaybeMessage<::Zee::Proto::Test2::TestMessage4>(Arena*);
template<> ::Zee::Proto::Test2::TestMessage5* Arena::CreateMaybeMessage<::Zee::Proto::Test2::TestMessage5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Zee {
namespace Proto {
namespace Test2 {

// ===================================================================

class TestMessage5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Test2.TestMessage5) */ {
 public:
  inline TestMessage5() : TestMessage5(nullptr) {}
  ~TestMessage5() override;
  explicit constexpr TestMessage5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage5(const TestMessage5& from);
  TestMessage5(TestMessage5&& from) noexcept
    : TestMessage5() {
    *this = ::std::move(from);
  }

  inline TestMessage5& operator=(const TestMessage5& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage5& operator=(TestMessage5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage5& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage5* internal_default_instance() {
    return reinterpret_cast<const TestMessage5*>(
               &_TestMessage5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage5& a, TestMessage5& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage5* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage5* New() const final {
    return new TestMessage5();
  }

  TestMessage5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage5& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Test2.TestMessage5";
  }
  protected:
  explicit TestMessage5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsg2FieldNumber = 1,
    kMsg3FieldNumber = 2,
  };
  // .Zee.Proto.Test.TestMessage msg2 = 1;
  bool has_msg2() const;
  private:
  bool _internal_has_msg2() const;
  public:
  void clear_msg2();
  const ::Zee::Proto::Test::TestMessage& msg2() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test::TestMessage* release_msg2();
  ::Zee::Proto::Test::TestMessage* mutable_msg2();
  void set_allocated_msg2(::Zee::Proto::Test::TestMessage* msg2);
  private:
  const ::Zee::Proto::Test::TestMessage& _internal_msg2() const;
  ::Zee::Proto::Test::TestMessage* _internal_mutable_msg2();
  public:
  void unsafe_arena_set_allocated_msg2(
      ::Zee::Proto::Test::TestMessage* msg2);
  ::Zee::Proto::Test::TestMessage* unsafe_arena_release_msg2();

  // .Zee.Proto.Test2.TestMessage4 msg3 = 2;
  bool has_msg3() const;
  private:
  bool _internal_has_msg3() const;
  public:
  void clear_msg3();
  const ::Zee::Proto::Test2::TestMessage4& msg3() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test2::TestMessage4* release_msg3();
  ::Zee::Proto::Test2::TestMessage4* mutable_msg3();
  void set_allocated_msg3(::Zee::Proto::Test2::TestMessage4* msg3);
  private:
  const ::Zee::Proto::Test2::TestMessage4& _internal_msg3() const;
  ::Zee::Proto::Test2::TestMessage4* _internal_mutable_msg3();
  public:
  void unsafe_arena_set_allocated_msg3(
      ::Zee::Proto::Test2::TestMessage4* msg3);
  ::Zee::Proto::Test2::TestMessage4* unsafe_arena_release_msg3();

  // @@protoc_insertion_point(class_scope:Zee.Proto.Test2.TestMessage5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Zee::Proto::Test::TestMessage* msg2_;
  ::Zee::Proto::Test2::TestMessage4* msg3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test2_2eproto;
};
// -------------------------------------------------------------------

class TestMessage3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Test2.TestMessage3) */ {
 public:
  inline TestMessage3() : TestMessage3(nullptr) {}
  ~TestMessage3() override;
  explicit constexpr TestMessage3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage3(const TestMessage3& from);
  TestMessage3(TestMessage3&& from) noexcept
    : TestMessage3() {
    *this = ::std::move(from);
  }

  inline TestMessage3& operator=(const TestMessage3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage3& operator=(TestMessage3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage3& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage3* internal_default_instance() {
    return reinterpret_cast<const TestMessage3*>(
               &_TestMessage3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage3& a, TestMessage3& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage3* New() const final {
    return new TestMessage3();
  }

  TestMessage3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Test2.TestMessage3";
  }
  protected:
  explicit TestMessage3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsg1FieldNumber = 1,
    kMsg2FieldNumber = 2,
  };
  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  bool has_msg1() const;
  private:
  bool _internal_has_msg1() const;
  public:
  void clear_msg1();
  const ::Zee::Proto::Test2::TestMessage2& msg1() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test2::TestMessage2* release_msg1();
  ::Zee::Proto::Test2::TestMessage2* mutable_msg1();
  void set_allocated_msg1(::Zee::Proto::Test2::TestMessage2* msg1);
  private:
  const ::Zee::Proto::Test2::TestMessage2& _internal_msg1() const;
  ::Zee::Proto::Test2::TestMessage2* _internal_mutable_msg1();
  public:
  void unsafe_arena_set_allocated_msg1(
      ::Zee::Proto::Test2::TestMessage2* msg1);
  ::Zee::Proto::Test2::TestMessage2* unsafe_arena_release_msg1();

  // .Zee.Proto.Test2.TestMessage2 msg2 = 2;
  bool has_msg2() const;
  private:
  bool _internal_has_msg2() const;
  public:
  void clear_msg2();
  const ::Zee::Proto::Test2::TestMessage2& msg2() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test2::TestMessage2* release_msg2();
  ::Zee::Proto::Test2::TestMessage2* mutable_msg2();
  void set_allocated_msg2(::Zee::Proto::Test2::TestMessage2* msg2);
  private:
  const ::Zee::Proto::Test2::TestMessage2& _internal_msg2() const;
  ::Zee::Proto::Test2::TestMessage2* _internal_mutable_msg2();
  public:
  void unsafe_arena_set_allocated_msg2(
      ::Zee::Proto::Test2::TestMessage2* msg2);
  ::Zee::Proto::Test2::TestMessage2* unsafe_arena_release_msg2();

  // @@protoc_insertion_point(class_scope:Zee.Proto.Test2.TestMessage3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Zee::Proto::Test2::TestMessage2* msg1_;
  ::Zee::Proto::Test2::TestMessage2* msg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test2_2eproto;
};
// -------------------------------------------------------------------

class TestMessage4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Test2.TestMessage4) */ {
 public:
  inline TestMessage4() : TestMessage4(nullptr) {}
  ~TestMessage4() override;
  explicit constexpr TestMessage4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage4(const TestMessage4& from);
  TestMessage4(TestMessage4&& from) noexcept
    : TestMessage4() {
    *this = ::std::move(from);
  }

  inline TestMessage4& operator=(const TestMessage4& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage4& operator=(TestMessage4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage4& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage4* internal_default_instance() {
    return reinterpret_cast<const TestMessage4*>(
               &_TestMessage4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestMessage4& a, TestMessage4& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage4* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage4* New() const final {
    return new TestMessage4();
  }

  TestMessage4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Test2.TestMessage4";
  }
  protected:
  explicit TestMessage4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsg1FieldNumber = 1,
    kMsg2FieldNumber = 2,
  };
  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  bool has_msg1() const;
  private:
  bool _internal_has_msg1() const;
  public:
  void clear_msg1();
  const ::Zee::Proto::Test2::TestMessage2& msg1() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test2::TestMessage2* release_msg1();
  ::Zee::Proto::Test2::TestMessage2* mutable_msg1();
  void set_allocated_msg1(::Zee::Proto::Test2::TestMessage2* msg1);
  private:
  const ::Zee::Proto::Test2::TestMessage2& _internal_msg1() const;
  ::Zee::Proto::Test2::TestMessage2* _internal_mutable_msg1();
  public:
  void unsafe_arena_set_allocated_msg1(
      ::Zee::Proto::Test2::TestMessage2* msg1);
  ::Zee::Proto::Test2::TestMessage2* unsafe_arena_release_msg1();

  // .Zee.Proto.Test2.TestMessage3 msg2 = 2;
  bool has_msg2() const;
  private:
  bool _internal_has_msg2() const;
  public:
  void clear_msg2();
  const ::Zee::Proto::Test2::TestMessage3& msg2() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test2::TestMessage3* release_msg2();
  ::Zee::Proto::Test2::TestMessage3* mutable_msg2();
  void set_allocated_msg2(::Zee::Proto::Test2::TestMessage3* msg2);
  private:
  const ::Zee::Proto::Test2::TestMessage3& _internal_msg2() const;
  ::Zee::Proto::Test2::TestMessage3* _internal_mutable_msg2();
  public:
  void unsafe_arena_set_allocated_msg2(
      ::Zee::Proto::Test2::TestMessage3* msg2);
  ::Zee::Proto::Test2::TestMessage3* unsafe_arena_release_msg2();

  // @@protoc_insertion_point(class_scope:Zee.Proto.Test2.TestMessage4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Zee::Proto::Test2::TestMessage2* msg1_;
  ::Zee::Proto::Test2::TestMessage3* msg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test2_2eproto;
};
// -------------------------------------------------------------------

class TestMessage2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Test2.TestMessage2) */ {
 public:
  inline TestMessage2() : TestMessage2(nullptr) {}
  ~TestMessage2() override;
  explicit constexpr TestMessage2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage2(const TestMessage2& from);
  TestMessage2(TestMessage2&& from) noexcept
    : TestMessage2() {
    *this = ::std::move(from);
  }

  inline TestMessage2& operator=(const TestMessage2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage2& operator=(TestMessage2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage2* internal_default_instance() {
    return reinterpret_cast<const TestMessage2*>(
               &_TestMessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestMessage2& a, TestMessage2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage2* New() const final {
    return new TestMessage2();
  }

  TestMessage2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Test2.TestMessage2";
  }
  protected:
  explicit TestMessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // .Zee.Proto.Test.TestMessage msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::Zee::Proto::Test::TestMessage& msg() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Test::TestMessage* release_msg();
  ::Zee::Proto::Test::TestMessage* mutable_msg();
  void set_allocated_msg(::Zee::Proto::Test::TestMessage* msg);
  private:
  const ::Zee::Proto::Test::TestMessage& _internal_msg() const;
  ::Zee::Proto::Test::TestMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::Zee::Proto::Test::TestMessage* msg);
  ::Zee::Proto::Test::TestMessage* unsafe_arena_release_msg();

  // @@protoc_insertion_point(class_scope:Zee.Proto.Test2.TestMessage2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Zee::Proto::Test::TestMessage* msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage5

// .Zee.Proto.Test.TestMessage msg2 = 1;
inline bool TestMessage5::_internal_has_msg2() const {
  return this != internal_default_instance() && msg2_ != nullptr;
}
inline bool TestMessage5::has_msg2() const {
  return _internal_has_msg2();
}
inline const ::Zee::Proto::Test::TestMessage& TestMessage5::_internal_msg2() const {
  const ::Zee::Proto::Test::TestMessage* p = msg2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test::TestMessage&>(
      ::Zee::Proto::Test::_TestMessage_default_instance_);
}
inline const ::Zee::Proto::Test::TestMessage& TestMessage5::msg2() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage5.msg2)
  return _internal_msg2();
}
inline void TestMessage5::unsafe_arena_set_allocated_msg2(
    ::Zee::Proto::Test::TestMessage* msg2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg2_);
  }
  msg2_ = msg2;
  if (msg2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage5.msg2)
}
inline ::Zee::Proto::Test::TestMessage* TestMessage5::release_msg2() {
  
  ::Zee::Proto::Test::TestMessage* temp = msg2_;
  msg2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage5::unsafe_arena_release_msg2() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage5.msg2)
  
  ::Zee::Proto::Test::TestMessage* temp = msg2_;
  msg2_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage5::_internal_mutable_msg2() {
  
  if (msg2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test::TestMessage>(GetArenaForAllocation());
    msg2_ = p;
  }
  return msg2_;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage5::mutable_msg2() {
  ::Zee::Proto::Test::TestMessage* _msg = _internal_mutable_msg2();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage5.msg2)
  return _msg;
}
inline void TestMessage5::set_allocated_msg2(::Zee::Proto::Test::TestMessage* msg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg2_);
  }
  if (msg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg2));
    if (message_arena != submessage_arena) {
      msg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg2, submessage_arena);
    }
    
  } else {
    
  }
  msg2_ = msg2;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage5.msg2)
}

// .Zee.Proto.Test2.TestMessage4 msg3 = 2;
inline bool TestMessage5::_internal_has_msg3() const {
  return this != internal_default_instance() && msg3_ != nullptr;
}
inline bool TestMessage5::has_msg3() const {
  return _internal_has_msg3();
}
inline void TestMessage5::clear_msg3() {
  if (GetArenaForAllocation() == nullptr && msg3_ != nullptr) {
    delete msg3_;
  }
  msg3_ = nullptr;
}
inline const ::Zee::Proto::Test2::TestMessage4& TestMessage5::_internal_msg3() const {
  const ::Zee::Proto::Test2::TestMessage4* p = msg3_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test2::TestMessage4&>(
      ::Zee::Proto::Test2::_TestMessage4_default_instance_);
}
inline const ::Zee::Proto::Test2::TestMessage4& TestMessage5::msg3() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage5.msg3)
  return _internal_msg3();
}
inline void TestMessage5::unsafe_arena_set_allocated_msg3(
    ::Zee::Proto::Test2::TestMessage4* msg3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg3_);
  }
  msg3_ = msg3;
  if (msg3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage5.msg3)
}
inline ::Zee::Proto::Test2::TestMessage4* TestMessage5::release_msg3() {
  
  ::Zee::Proto::Test2::TestMessage4* temp = msg3_;
  msg3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage4* TestMessage5::unsafe_arena_release_msg3() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage5.msg3)
  
  ::Zee::Proto::Test2::TestMessage4* temp = msg3_;
  msg3_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage4* TestMessage5::_internal_mutable_msg3() {
  
  if (msg3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test2::TestMessage4>(GetArenaForAllocation());
    msg3_ = p;
  }
  return msg3_;
}
inline ::Zee::Proto::Test2::TestMessage4* TestMessage5::mutable_msg3() {
  ::Zee::Proto::Test2::TestMessage4* _msg = _internal_mutable_msg3();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage5.msg3)
  return _msg;
}
inline void TestMessage5::set_allocated_msg3(::Zee::Proto::Test2::TestMessage4* msg3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msg3_;
  }
  if (msg3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Test2::TestMessage4>::GetOwningArena(msg3);
    if (message_arena != submessage_arena) {
      msg3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg3, submessage_arena);
    }
    
  } else {
    
  }
  msg3_ = msg3;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage5.msg3)
}

// -------------------------------------------------------------------

// TestMessage3

// .Zee.Proto.Test2.TestMessage2 msg1 = 1;
inline bool TestMessage3::_internal_has_msg1() const {
  return this != internal_default_instance() && msg1_ != nullptr;
}
inline bool TestMessage3::has_msg1() const {
  return _internal_has_msg1();
}
inline void TestMessage3::clear_msg1() {
  if (GetArenaForAllocation() == nullptr && msg1_ != nullptr) {
    delete msg1_;
  }
  msg1_ = nullptr;
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage3::_internal_msg1() const {
  const ::Zee::Proto::Test2::TestMessage2* p = msg1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test2::TestMessage2&>(
      ::Zee::Proto::Test2::_TestMessage2_default_instance_);
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage3::msg1() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage3.msg1)
  return _internal_msg1();
}
inline void TestMessage3::unsafe_arena_set_allocated_msg1(
    ::Zee::Proto::Test2::TestMessage2* msg1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg1_);
  }
  msg1_ = msg1;
  if (msg1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage3.msg1)
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::release_msg1() {
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg1_;
  msg1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::unsafe_arena_release_msg1() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage3.msg1)
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg1_;
  msg1_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::_internal_mutable_msg1() {
  
  if (msg1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test2::TestMessage2>(GetArenaForAllocation());
    msg1_ = p;
  }
  return msg1_;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::mutable_msg1() {
  ::Zee::Proto::Test2::TestMessage2* _msg = _internal_mutable_msg1();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage3.msg1)
  return _msg;
}
inline void TestMessage3::set_allocated_msg1(::Zee::Proto::Test2::TestMessage2* msg1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msg1_;
  }
  if (msg1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Test2::TestMessage2>::GetOwningArena(msg1);
    if (message_arena != submessage_arena) {
      msg1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg1, submessage_arena);
    }
    
  } else {
    
  }
  msg1_ = msg1;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage3.msg1)
}

// .Zee.Proto.Test2.TestMessage2 msg2 = 2;
inline bool TestMessage3::_internal_has_msg2() const {
  return this != internal_default_instance() && msg2_ != nullptr;
}
inline bool TestMessage3::has_msg2() const {
  return _internal_has_msg2();
}
inline void TestMessage3::clear_msg2() {
  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage3::_internal_msg2() const {
  const ::Zee::Proto::Test2::TestMessage2* p = msg2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test2::TestMessage2&>(
      ::Zee::Proto::Test2::_TestMessage2_default_instance_);
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage3::msg2() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage3.msg2)
  return _internal_msg2();
}
inline void TestMessage3::unsafe_arena_set_allocated_msg2(
    ::Zee::Proto::Test2::TestMessage2* msg2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg2_);
  }
  msg2_ = msg2;
  if (msg2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage3.msg2)
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::release_msg2() {
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg2_;
  msg2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::unsafe_arena_release_msg2() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage3.msg2)
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg2_;
  msg2_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::_internal_mutable_msg2() {
  
  if (msg2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test2::TestMessage2>(GetArenaForAllocation());
    msg2_ = p;
  }
  return msg2_;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage3::mutable_msg2() {
  ::Zee::Proto::Test2::TestMessage2* _msg = _internal_mutable_msg2();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage3.msg2)
  return _msg;
}
inline void TestMessage3::set_allocated_msg2(::Zee::Proto::Test2::TestMessage2* msg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msg2_;
  }
  if (msg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Test2::TestMessage2>::GetOwningArena(msg2);
    if (message_arena != submessage_arena) {
      msg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg2, submessage_arena);
    }
    
  } else {
    
  }
  msg2_ = msg2;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage3.msg2)
}

// -------------------------------------------------------------------

// TestMessage4

// .Zee.Proto.Test2.TestMessage2 msg1 = 1;
inline bool TestMessage4::_internal_has_msg1() const {
  return this != internal_default_instance() && msg1_ != nullptr;
}
inline bool TestMessage4::has_msg1() const {
  return _internal_has_msg1();
}
inline void TestMessage4::clear_msg1() {
  if (GetArenaForAllocation() == nullptr && msg1_ != nullptr) {
    delete msg1_;
  }
  msg1_ = nullptr;
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage4::_internal_msg1() const {
  const ::Zee::Proto::Test2::TestMessage2* p = msg1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test2::TestMessage2&>(
      ::Zee::Proto::Test2::_TestMessage2_default_instance_);
}
inline const ::Zee::Proto::Test2::TestMessage2& TestMessage4::msg1() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage4.msg1)
  return _internal_msg1();
}
inline void TestMessage4::unsafe_arena_set_allocated_msg1(
    ::Zee::Proto::Test2::TestMessage2* msg1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg1_);
  }
  msg1_ = msg1;
  if (msg1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage4.msg1)
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage4::release_msg1() {
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg1_;
  msg1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage4::unsafe_arena_release_msg1() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage4.msg1)
  
  ::Zee::Proto::Test2::TestMessage2* temp = msg1_;
  msg1_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage4::_internal_mutable_msg1() {
  
  if (msg1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test2::TestMessage2>(GetArenaForAllocation());
    msg1_ = p;
  }
  return msg1_;
}
inline ::Zee::Proto::Test2::TestMessage2* TestMessage4::mutable_msg1() {
  ::Zee::Proto::Test2::TestMessage2* _msg = _internal_mutable_msg1();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage4.msg1)
  return _msg;
}
inline void TestMessage4::set_allocated_msg1(::Zee::Proto::Test2::TestMessage2* msg1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msg1_;
  }
  if (msg1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Test2::TestMessage2>::GetOwningArena(msg1);
    if (message_arena != submessage_arena) {
      msg1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg1, submessage_arena);
    }
    
  } else {
    
  }
  msg1_ = msg1;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage4.msg1)
}

// .Zee.Proto.Test2.TestMessage3 msg2 = 2;
inline bool TestMessage4::_internal_has_msg2() const {
  return this != internal_default_instance() && msg2_ != nullptr;
}
inline bool TestMessage4::has_msg2() const {
  return _internal_has_msg2();
}
inline void TestMessage4::clear_msg2() {
  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
}
inline const ::Zee::Proto::Test2::TestMessage3& TestMessage4::_internal_msg2() const {
  const ::Zee::Proto::Test2::TestMessage3* p = msg2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test2::TestMessage3&>(
      ::Zee::Proto::Test2::_TestMessage3_default_instance_);
}
inline const ::Zee::Proto::Test2::TestMessage3& TestMessage4::msg2() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage4.msg2)
  return _internal_msg2();
}
inline void TestMessage4::unsafe_arena_set_allocated_msg2(
    ::Zee::Proto::Test2::TestMessage3* msg2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg2_);
  }
  msg2_ = msg2;
  if (msg2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage4.msg2)
}
inline ::Zee::Proto::Test2::TestMessage3* TestMessage4::release_msg2() {
  
  ::Zee::Proto::Test2::TestMessage3* temp = msg2_;
  msg2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage3* TestMessage4::unsafe_arena_release_msg2() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage4.msg2)
  
  ::Zee::Proto::Test2::TestMessage3* temp = msg2_;
  msg2_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test2::TestMessage3* TestMessage4::_internal_mutable_msg2() {
  
  if (msg2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test2::TestMessage3>(GetArenaForAllocation());
    msg2_ = p;
  }
  return msg2_;
}
inline ::Zee::Proto::Test2::TestMessage3* TestMessage4::mutable_msg2() {
  ::Zee::Proto::Test2::TestMessage3* _msg = _internal_mutable_msg2();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage4.msg2)
  return _msg;
}
inline void TestMessage4::set_allocated_msg2(::Zee::Proto::Test2::TestMessage3* msg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msg2_;
  }
  if (msg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Test2::TestMessage3>::GetOwningArena(msg2);
    if (message_arena != submessage_arena) {
      msg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg2, submessage_arena);
    }
    
  } else {
    
  }
  msg2_ = msg2;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage4.msg2)
}

// -------------------------------------------------------------------

// TestMessage2

// .Zee.Proto.Test.TestMessage msg = 1;
inline bool TestMessage2::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool TestMessage2::has_msg() const {
  return _internal_has_msg();
}
inline const ::Zee::Proto::Test::TestMessage& TestMessage2::_internal_msg() const {
  const ::Zee::Proto::Test::TestMessage* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Test::TestMessage&>(
      ::Zee::Proto::Test::_TestMessage_default_instance_);
}
inline const ::Zee::Proto::Test::TestMessage& TestMessage2::msg() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Test2.TestMessage2.msg)
  return _internal_msg();
}
inline void TestMessage2::unsafe_arena_set_allocated_msg(
    ::Zee::Proto::Test::TestMessage* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Test2.TestMessage2.msg)
}
inline ::Zee::Proto::Test::TestMessage* TestMessage2::release_msg() {
  
  ::Zee::Proto::Test::TestMessage* temp = msg_;
  msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage2::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Test2.TestMessage2.msg)
  
  ::Zee::Proto::Test::TestMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage2::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Test::TestMessage>(GetArenaForAllocation());
    msg_ = p;
  }
  return msg_;
}
inline ::Zee::Proto::Test::TestMessage* TestMessage2::mutable_msg() {
  ::Zee::Proto::Test::TestMessage* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Test2.TestMessage2.msg)
  return _msg;
}
inline void TestMessage2::set_allocated_msg(::Zee::Proto::Test::TestMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg));
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Test2.TestMessage2.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Test2
}  // namespace Proto
}  // namespace Zee

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Test2_2eproto
