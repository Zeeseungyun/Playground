#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test2.proto

#include "Test2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Zee {
namespace Proto {
namespace Test2 {
constexpr TestMessage5::TestMessage5(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg2_(nullptr)
  , msg3_(nullptr){}
struct TestMessage5DefaultTypeInternal {
  constexpr TestMessage5DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessage5DefaultTypeInternal() {}
  union {
    TestMessage5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage5DefaultTypeInternal _TestMessage5_default_instance_;
constexpr TestMessage3::TestMessage3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg1_(nullptr)
  , msg2_(nullptr){}
struct TestMessage3DefaultTypeInternal {
  constexpr TestMessage3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessage3DefaultTypeInternal() {}
  union {
    TestMessage3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage3DefaultTypeInternal _TestMessage3_default_instance_;
constexpr TestMessage4::TestMessage4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg1_(nullptr)
  , msg2_(nullptr){}
struct TestMessage4DefaultTypeInternal {
  constexpr TestMessage4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessage4DefaultTypeInternal() {}
  union {
    TestMessage4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage4DefaultTypeInternal _TestMessage4_default_instance_;
constexpr TestMessage2::TestMessage2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr){}
struct TestMessage2DefaultTypeInternal {
  constexpr TestMessage2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessage2DefaultTypeInternal() {}
  union {
    TestMessage2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage2DefaultTypeInternal _TestMessage2_default_instance_;
}  // namespace Test2
}  // namespace Proto
}  // namespace Zee
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Test2_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Test2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Test2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Test2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage5, msg2_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage5, msg3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage3, msg1_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage3, msg2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage4, msg1_),
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage4, msg2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Zee::Proto::Test2::TestMessage2, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Zee::Proto::Test2::TestMessage5)},
  { 8, -1, -1, sizeof(::Zee::Proto::Test2::TestMessage3)},
  { 16, -1, -1, sizeof(::Zee::Proto::Test2::TestMessage4)},
  { 24, -1, -1, sizeof(::Zee::Proto::Test2::TestMessage2)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Test2::_TestMessage5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Test2::_TestMessage3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Test2::_TestMessage4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Zee::Proto::Test2::_TestMessage2_default_instance_),
};

const char descriptor_table_protodef_Test2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Test2.proto\022\017Zee.Proto.Test2\032\nTest.pro"
  "to\"a\n\014TestMessage5\022$\n\004msg2\030\001 \001(\0132\026.Zee.P"
  "roto.TestMessage\022+\n\004msg3\030\002 \001(\0132\035.Zee.Pro"
  "to.Test2.TestMessage4\"h\n\014TestMessage3\022+\n"
  "\004msg1\030\001 \001(\0132\035.Zee.Proto.Test2.TestMessag"
  "e2\022+\n\004msg2\030\002 \001(\0132\035.Zee.Proto.Test2.TestM"
  "essage2\"h\n\014TestMessage4\022+\n\004msg1\030\001 \001(\0132\035."
  "Zee.Proto.Test2.TestMessage2\022+\n\004msg2\030\002 \001"
  "(\0132\035.Zee.Proto.Test2.TestMessage3\"3\n\014Tes"
  "tMessage2\022#\n\003msg\030\001 \001(\0132\026.Zee.Proto.TestM"
  "essageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Test2_2eproto_deps[1] = {
  &::descriptor_table_Test_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Test2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Test2_2eproto = {
  false, false, 414, descriptor_table_protodef_Test2_2eproto, "Test2.proto", 
  &descriptor_table_Test2_2eproto_once, descriptor_table_Test2_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_Test2_2eproto::offsets,
  file_level_metadata_Test2_2eproto, file_level_enum_descriptors_Test2_2eproto, file_level_service_descriptors_Test2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Test2_2eproto_getter() {
  return &descriptor_table_Test2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Test2_2eproto(&descriptor_table_Test2_2eproto);
namespace Zee {
namespace Proto {
namespace Test2 {

// ===================================================================

class TestMessage5::_Internal {
 public:
  static const ::Zee::Proto::TestMessage& msg2(const TestMessage5* msg);
  static const ::Zee::Proto::Test2::TestMessage4& msg3(const TestMessage5* msg);
};

const ::Zee::Proto::TestMessage&
TestMessage5::_Internal::msg2(const TestMessage5* msg) {
  return *msg->msg2_;
}
const ::Zee::Proto::Test2::TestMessage4&
TestMessage5::_Internal::msg3(const TestMessage5* msg) {
  return *msg->msg3_;
}
void TestMessage5::clear_msg2() {
  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
}
TestMessage5::TestMessage5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Test2.TestMessage5)
}
TestMessage5::TestMessage5(const TestMessage5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg2()) {
    msg2_ = new ::Zee::Proto::TestMessage(*from.msg2_);
  } else {
    msg2_ = nullptr;
  }
  if (from._internal_has_msg3()) {
    msg3_ = new ::Zee::Proto::Test2::TestMessage4(*from.msg3_);
  } else {
    msg3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Test2.TestMessage5)
}

void TestMessage5::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg2_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg3_) -
    reinterpret_cast<char*>(&msg2_)) + sizeof(msg3_));
}

TestMessage5::~TestMessage5() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Test2.TestMessage5)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg2_;
  if (this != internal_default_instance()) delete msg3_;
}

void TestMessage5::ArenaDtor(void* object) {
  TestMessage5* _this = reinterpret_cast< TestMessage5* >(object);
  (void)_this;
}
void TestMessage5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage5::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Test2.TestMessage5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msg3_ != nullptr) {
    delete msg3_;
  }
  msg3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.TestMessage msg2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Test2.TestMessage4 msg3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Test2.TestMessage5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.TestMessage msg2 = 1;
  if (this->_internal_has_msg2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg2(this), target, stream);
  }

  // .Zee.Proto.Test2.TestMessage4 msg3 = 2;
  if (this->_internal_has_msg3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Test2.TestMessage5)
  return target;
}

size_t TestMessage5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Test2.TestMessage5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.TestMessage msg2 = 1;
  if (this->_internal_has_msg2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg2_);
  }

  // .Zee.Proto.Test2.TestMessage4 msg3 = 2;
  if (this->_internal_has_msg3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg3_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage5::GetClassData() const { return &_class_data_; }

void TestMessage5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage5 *>(to)->MergeFrom(
      static_cast<const TestMessage5 &>(from));
}


void TestMessage5::MergeFrom(const TestMessage5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Test2.TestMessage5)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg2()) {
    _internal_mutable_msg2()->::Zee::Proto::TestMessage::MergeFrom(from._internal_msg2());
  }
  if (from._internal_has_msg3()) {
    _internal_mutable_msg3()->::Zee::Proto::Test2::TestMessage4::MergeFrom(from._internal_msg3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage5::CopyFrom(const TestMessage5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Test2.TestMessage5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage5::IsInitialized() const {
  return true;
}

void TestMessage5::InternalSwap(TestMessage5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage5, msg3_)
      + sizeof(TestMessage5::msg3_)
      - PROTOBUF_FIELD_OFFSET(TestMessage5, msg2_)>(
          reinterpret_cast<char*>(&msg2_),
          reinterpret_cast<char*>(&other->msg2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage5::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Test2_2eproto_getter, &descriptor_table_Test2_2eproto_once,
      file_level_metadata_Test2_2eproto[0]);
}

// ===================================================================

class TestMessage3::_Internal {
 public:
  static const ::Zee::Proto::Test2::TestMessage2& msg1(const TestMessage3* msg);
  static const ::Zee::Proto::Test2::TestMessage2& msg2(const TestMessage3* msg);
};

const ::Zee::Proto::Test2::TestMessage2&
TestMessage3::_Internal::msg1(const TestMessage3* msg) {
  return *msg->msg1_;
}
const ::Zee::Proto::Test2::TestMessage2&
TestMessage3::_Internal::msg2(const TestMessage3* msg) {
  return *msg->msg2_;
}
TestMessage3::TestMessage3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Test2.TestMessage3)
}
TestMessage3::TestMessage3(const TestMessage3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg1()) {
    msg1_ = new ::Zee::Proto::Test2::TestMessage2(*from.msg1_);
  } else {
    msg1_ = nullptr;
  }
  if (from._internal_has_msg2()) {
    msg2_ = new ::Zee::Proto::Test2::TestMessage2(*from.msg2_);
  } else {
    msg2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Test2.TestMessage3)
}

void TestMessage3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg2_) -
    reinterpret_cast<char*>(&msg1_)) + sizeof(msg2_));
}

TestMessage3::~TestMessage3() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Test2.TestMessage3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg1_;
  if (this != internal_default_instance()) delete msg2_;
}

void TestMessage3::ArenaDtor(void* object) {
  TestMessage3* _this = reinterpret_cast< TestMessage3* >(object);
  (void)_this;
}
void TestMessage3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage3::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Test2.TestMessage3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg1_ != nullptr) {
    delete msg1_;
  }
  msg1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Test2.TestMessage2 msg2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Test2.TestMessage3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  if (this->_internal_has_msg1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg1(this), target, stream);
  }

  // .Zee.Proto.Test2.TestMessage2 msg2 = 2;
  if (this->_internal_has_msg2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Test2.TestMessage3)
  return target;
}

size_t TestMessage3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Test2.TestMessage3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  if (this->_internal_has_msg1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg1_);
  }

  // .Zee.Proto.Test2.TestMessage2 msg2 = 2;
  if (this->_internal_has_msg2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage3::GetClassData() const { return &_class_data_; }

void TestMessage3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage3 *>(to)->MergeFrom(
      static_cast<const TestMessage3 &>(from));
}


void TestMessage3::MergeFrom(const TestMessage3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Test2.TestMessage3)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg1()) {
    _internal_mutable_msg1()->::Zee::Proto::Test2::TestMessage2::MergeFrom(from._internal_msg1());
  }
  if (from._internal_has_msg2()) {
    _internal_mutable_msg2()->::Zee::Proto::Test2::TestMessage2::MergeFrom(from._internal_msg2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage3::CopyFrom(const TestMessage3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Test2.TestMessage3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage3::IsInitialized() const {
  return true;
}

void TestMessage3::InternalSwap(TestMessage3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage3, msg2_)
      + sizeof(TestMessage3::msg2_)
      - PROTOBUF_FIELD_OFFSET(TestMessage3, msg1_)>(
          reinterpret_cast<char*>(&msg1_),
          reinterpret_cast<char*>(&other->msg1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Test2_2eproto_getter, &descriptor_table_Test2_2eproto_once,
      file_level_metadata_Test2_2eproto[1]);
}

// ===================================================================

class TestMessage4::_Internal {
 public:
  static const ::Zee::Proto::Test2::TestMessage2& msg1(const TestMessage4* msg);
  static const ::Zee::Proto::Test2::TestMessage3& msg2(const TestMessage4* msg);
};

const ::Zee::Proto::Test2::TestMessage2&
TestMessage4::_Internal::msg1(const TestMessage4* msg) {
  return *msg->msg1_;
}
const ::Zee::Proto::Test2::TestMessage3&
TestMessage4::_Internal::msg2(const TestMessage4* msg) {
  return *msg->msg2_;
}
TestMessage4::TestMessage4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Test2.TestMessage4)
}
TestMessage4::TestMessage4(const TestMessage4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg1()) {
    msg1_ = new ::Zee::Proto::Test2::TestMessage2(*from.msg1_);
  } else {
    msg1_ = nullptr;
  }
  if (from._internal_has_msg2()) {
    msg2_ = new ::Zee::Proto::Test2::TestMessage3(*from.msg2_);
  } else {
    msg2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Test2.TestMessage4)
}

void TestMessage4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg2_) -
    reinterpret_cast<char*>(&msg1_)) + sizeof(msg2_));
}

TestMessage4::~TestMessage4() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Test2.TestMessage4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg1_;
  if (this != internal_default_instance()) delete msg2_;
}

void TestMessage4::ArenaDtor(void* object) {
  TestMessage4* _this = reinterpret_cast< TestMessage4* >(object);
  (void)_this;
}
void TestMessage4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage4::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Test2.TestMessage4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg1_ != nullptr) {
    delete msg1_;
  }
  msg1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msg2_ != nullptr) {
    delete msg2_;
  }
  msg2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Zee.Proto.Test2.TestMessage3 msg2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Test2.TestMessage4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  if (this->_internal_has_msg1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg1(this), target, stream);
  }

  // .Zee.Proto.Test2.TestMessage3 msg2 = 2;
  if (this->_internal_has_msg2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Test2.TestMessage4)
  return target;
}

size_t TestMessage4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Test2.TestMessage4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.Test2.TestMessage2 msg1 = 1;
  if (this->_internal_has_msg1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg1_);
  }

  // .Zee.Proto.Test2.TestMessage3 msg2 = 2;
  if (this->_internal_has_msg2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage4::GetClassData() const { return &_class_data_; }

void TestMessage4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage4 *>(to)->MergeFrom(
      static_cast<const TestMessage4 &>(from));
}


void TestMessage4::MergeFrom(const TestMessage4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Test2.TestMessage4)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg1()) {
    _internal_mutable_msg1()->::Zee::Proto::Test2::TestMessage2::MergeFrom(from._internal_msg1());
  }
  if (from._internal_has_msg2()) {
    _internal_mutable_msg2()->::Zee::Proto::Test2::TestMessage3::MergeFrom(from._internal_msg2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage4::CopyFrom(const TestMessage4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Test2.TestMessage4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage4::IsInitialized() const {
  return true;
}

void TestMessage4::InternalSwap(TestMessage4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage4, msg2_)
      + sizeof(TestMessage4::msg2_)
      - PROTOBUF_FIELD_OFFSET(TestMessage4, msg1_)>(
          reinterpret_cast<char*>(&msg1_),
          reinterpret_cast<char*>(&other->msg1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Test2_2eproto_getter, &descriptor_table_Test2_2eproto_once,
      file_level_metadata_Test2_2eproto[2]);
}

// ===================================================================

class TestMessage2::_Internal {
 public:
  static const ::Zee::Proto::TestMessage& msg(const TestMessage2* msg);
};

const ::Zee::Proto::TestMessage&
TestMessage2::_Internal::msg(const TestMessage2* msg) {
  return *msg->msg_;
}
void TestMessage2::clear_msg() {
  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
TestMessage2::TestMessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Zee.Proto.Test2.TestMessage2)
}
TestMessage2::TestMessage2(const TestMessage2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::Zee::Proto::TestMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Zee.Proto.Test2.TestMessage2)
}

void TestMessage2::SharedCtor() {
msg_ = nullptr;
}

TestMessage2::~TestMessage2() {
  // @@protoc_insertion_point(destructor:Zee.Proto.Test2.TestMessage2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void TestMessage2::ArenaDtor(void* object) {
  TestMessage2* _this = reinterpret_cast< TestMessage2* >(object);
  (void)_this;
}
void TestMessage2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage2::Clear() {
// @@protoc_insertion_point(message_clear_start:Zee.Proto.Test2.TestMessage2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Zee.Proto.TestMessage msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Zee.Proto.Test2.TestMessage2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Zee.Proto.TestMessage msg = 1;
  if (this->_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zee.Proto.Test2.TestMessage2)
  return target;
}

size_t TestMessage2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zee.Proto.Test2.TestMessage2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Zee.Proto.TestMessage msg = 1;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage2::GetClassData() const { return &_class_data_; }

void TestMessage2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage2 *>(to)->MergeFrom(
      static_cast<const TestMessage2 &>(from));
}


void TestMessage2::MergeFrom(const TestMessage2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zee.Proto.Test2.TestMessage2)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::Zee::Proto::TestMessage::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage2::CopyFrom(const TestMessage2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zee.Proto.Test2.TestMessage2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage2::IsInitialized() const {
  return true;
}

void TestMessage2::InternalSwap(TestMessage2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Test2_2eproto_getter, &descriptor_table_Test2_2eproto_once,
      file_level_metadata_Test2_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Test2
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Zee::Proto::Test2::TestMessage5* Arena::CreateMaybeMessage< ::Zee::Proto::Test2::TestMessage5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Test2::TestMessage5 >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Test2::TestMessage3* Arena::CreateMaybeMessage< ::Zee::Proto::Test2::TestMessage3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Test2::TestMessage3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Test2::TestMessage4* Arena::CreateMaybeMessage< ::Zee::Proto::Test2::TestMessage4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Test2::TestMessage4 >(arena);
}
template<> PROTOBUF_NOINLINE ::Zee::Proto::Test2::TestMessage2* Arena::CreateMaybeMessage< ::Zee::Proto::Test2::TestMessage2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Zee::Proto::Test2::TestMessage2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

