// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data/DataCommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Data_2fDataCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Data_2fDataCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Data_2fDataCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Data_2fDataCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Data_2fDataCommon_2eproto;
namespace Zee {
namespace Proto {
namespace Data {
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotator;
struct RotatorDefaultTypeInternal;
extern RotatorDefaultTypeInternal _Rotator_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace Data
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> ::Zee::Proto::Data::Position* Arena::CreateMaybeMessage<::Zee::Proto::Data::Position>(Arena*);
template<> ::Zee::Proto::Data::Rotator* Arena::CreateMaybeMessage<::Zee::Proto::Data::Rotator>(Arena*);
template<> ::Zee::Proto::Data::Vector* Arena::CreateMaybeMessage<::Zee::Proto::Data::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Zee {
namespace Proto {
namespace Data {

// ===================================================================

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Data.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return new Vector();
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Data.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Data.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Data_2fDataCommon_2eproto;
};
// -------------------------------------------------------------------

class Rotator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Data.Rotator) */ {
 public:
  inline Rotator() : Rotator(nullptr) {}
  ~Rotator() override;
  explicit constexpr Rotator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotator(const Rotator& from);
  Rotator(Rotator&& from) noexcept
    : Rotator() {
    *this = ::std::move(from);
  }

  inline Rotator& operator=(const Rotator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotator& operator=(Rotator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotator* internal_default_instance() {
    return reinterpret_cast<const Rotator*>(
               &_Rotator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rotator& a, Rotator& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotator* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rotator* New() const final {
    return new Rotator();
  }

  Rotator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rotator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rotator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Data.Rotator";
  }
  protected:
  explicit Rotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // float Yaw = 1;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float Pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float Roll = 3;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Data.Rotator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float yaw_;
  float pitch_;
  float roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Data_2fDataCommon_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Data.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Data.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 2,
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kUIDFieldNumber = 1,
  };
  // string MapName = 2;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_MUST_USE_RESULT std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // .Zee.Proto.Data.Vector Pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Zee::Proto::Data::Vector& pos() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Data::Vector* release_pos();
  ::Zee::Proto::Data::Vector* mutable_pos();
  void set_allocated_pos(::Zee::Proto::Data::Vector* pos);
  private:
  const ::Zee::Proto::Data::Vector& _internal_pos() const;
  ::Zee::Proto::Data::Vector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Zee::Proto::Data::Vector* pos);
  ::Zee::Proto::Data::Vector* unsafe_arena_release_pos();

  // .Zee.Proto.Data.Rotator Rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Zee::Proto::Data::Rotator& rot() const;
  PROTOBUF_MUST_USE_RESULT ::Zee::Proto::Data::Rotator* release_rot();
  ::Zee::Proto::Data::Rotator* mutable_rot();
  void set_allocated_rot(::Zee::Proto::Data::Rotator* rot);
  private:
  const ::Zee::Proto::Data::Rotator& _internal_rot() const;
  ::Zee::Proto::Data::Rotator* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Zee::Proto::Data::Rotator* rot);
  ::Zee::Proto::Data::Rotator* unsafe_arena_release_rot();

  // int64 UID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Data.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  ::Zee::Proto::Data::Vector* pos_;
  ::Zee::Proto::Data::Rotator* rot_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Data_2fDataCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// float X = 1;
inline void Vector::clear_x() {
  x_ = 0;
}
inline float Vector::_internal_x() const {
  return x_;
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Vector.X)
  return _internal_x();
}
inline void Vector::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Vector.X)
}

// float Y = 2;
inline void Vector::clear_y() {
  y_ = 0;
}
inline float Vector::_internal_y() const {
  return y_;
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Vector.Y)
  return _internal_y();
}
inline void Vector::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Vector.Y)
}

// float Z = 3;
inline void Vector::clear_z() {
  z_ = 0;
}
inline float Vector::_internal_z() const {
  return z_;
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Vector.Z)
  return _internal_z();
}
inline void Vector::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Vector.Z)
}

// -------------------------------------------------------------------

// Rotator

// float Yaw = 1;
inline void Rotator::clear_yaw() {
  yaw_ = 0;
}
inline float Rotator::_internal_yaw() const {
  return yaw_;
}
inline float Rotator::yaw() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Rotator.Yaw)
  return _internal_yaw();
}
inline void Rotator::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Rotator::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Rotator.Yaw)
}

// float Pitch = 2;
inline void Rotator::clear_pitch() {
  pitch_ = 0;
}
inline float Rotator::_internal_pitch() const {
  return pitch_;
}
inline float Rotator::pitch() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Rotator.Pitch)
  return _internal_pitch();
}
inline void Rotator::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Rotator::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Rotator.Pitch)
}

// float Roll = 3;
inline void Rotator::clear_roll() {
  roll_ = 0;
}
inline float Rotator::_internal_roll() const {
  return roll_;
}
inline float Rotator::roll() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Rotator.Roll)
  return _internal_roll();
}
inline void Rotator::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void Rotator::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Rotator.Roll)
}

// -------------------------------------------------------------------

// Position

// int64 UID = 1;
inline void Position::clear_uid() {
  uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::uid() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Position.UID)
  return _internal_uid();
}
inline void Position::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void Position::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Position.UID)
}

// string MapName = 2;
inline void Position::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& Position::mapname() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Position.MapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Zee.Proto.Data.Position.MapName)
}
inline std::string* Position::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Data.Position.MapName)
  return _s;
}
inline const std::string& Position::_internal_mapname() const {
  return mapname_.Get();
}
inline void Position::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_mapname() {
  
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_mapname() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Data.Position.MapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Data.Position.MapName)
}

// .Zee.Proto.Data.Vector Pos = 3;
inline bool Position::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Position::has_pos() const {
  return _internal_has_pos();
}
inline void Position::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Zee::Proto::Data::Vector& Position::_internal_pos() const {
  const ::Zee::Proto::Data::Vector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Data::Vector&>(
      ::Zee::Proto::Data::_Vector_default_instance_);
}
inline const ::Zee::Proto::Data::Vector& Position::pos() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Position.Pos)
  return _internal_pos();
}
inline void Position::unsafe_arena_set_allocated_pos(
    ::Zee::Proto::Data::Vector* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Data.Position.Pos)
}
inline ::Zee::Proto::Data::Vector* Position::release_pos() {
  
  ::Zee::Proto::Data::Vector* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Data::Vector* Position::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Data.Position.Pos)
  
  ::Zee::Proto::Data::Vector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Data::Vector* Position::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Data::Vector>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Zee::Proto::Data::Vector* Position::mutable_pos() {
  ::Zee::Proto::Data::Vector* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Data.Position.Pos)
  return _msg;
}
inline void Position::set_allocated_pos(::Zee::Proto::Data::Vector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Data::Vector>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Data.Position.Pos)
}

// .Zee.Proto.Data.Rotator Rot = 4;
inline bool Position::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool Position::has_rot() const {
  return _internal_has_rot();
}
inline void Position::clear_rot() {
  if (GetArenaForAllocation() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::Zee::Proto::Data::Rotator& Position::_internal_rot() const {
  const ::Zee::Proto::Data::Rotator* p = rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Zee::Proto::Data::Rotator&>(
      ::Zee::Proto::Data::_Rotator_default_instance_);
}
inline const ::Zee::Proto::Data::Rotator& Position::rot() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Data.Position.Rot)
  return _internal_rot();
}
inline void Position::unsafe_arena_set_allocated_rot(
    ::Zee::Proto::Data::Rotator* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zee.Proto.Data.Position.Rot)
}
inline ::Zee::Proto::Data::Rotator* Position::release_rot() {
  
  ::Zee::Proto::Data::Rotator* temp = rot_;
  rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Zee::Proto::Data::Rotator* Position::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Zee.Proto.Data.Position.Rot)
  
  ::Zee::Proto::Data::Rotator* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::Zee::Proto::Data::Rotator* Position::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Zee::Proto::Data::Rotator>(GetArenaForAllocation());
    rot_ = p;
  }
  return rot_;
}
inline ::Zee::Proto::Data::Rotator* Position::mutable_rot() {
  ::Zee::Proto::Data::Rotator* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:Zee.Proto.Data.Position.Rot)
  return _msg;
}
inline void Position::set_allocated_rot(::Zee::Proto::Data::Rotator* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Zee::Proto::Data::Rotator>::GetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Zee.Proto.Data.Position.Rot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace Proto
}  // namespace Zee

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Data_2fDataCommon_2eproto
