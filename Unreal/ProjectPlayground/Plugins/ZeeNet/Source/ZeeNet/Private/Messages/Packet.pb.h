// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace Zee {
namespace Proto {
namespace Packet {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace Packet
}  // namespace Proto
}  // namespace Zee
PROTOBUF_NAMESPACE_OPEN
template<> ::Zee::Proto::Packet::Header* Arena::CreateMaybeMessage<::Zee::Proto::Packet::Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Zee {
namespace Proto {
namespace Packet {

enum Type : int {
  None = 0,
  Notify = 1,
  Response = 2,
  Request = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = None;
constexpr Type Type_MAX = Request;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zee.Proto.Packet.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return new Header();
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zee.Proto.Packet.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketSizeFieldNumber = 1,
    kPointFieldNumber = 2,
    kSequenceFieldNumber = 3,
    kPacketTypeFieldNumber = 4,
  };
  // int32 PacketSize = 1;
  void clear_packetsize();
  ::PROTOBUF_NAMESPACE_ID::int32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packetsize() const;
  void _internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Zee.Proto.Packet.Type PacketType = 4;
  void clear_packettype();
  ::Zee::Proto::Packet::Type packettype() const;
  void set_packettype(::Zee::Proto::Packet::Type value);
  private:
  ::Zee::Proto::Packet::Type _internal_packettype() const;
  void _internal_set_packettype(::Zee::Proto::Packet::Type value);
  public:

  // @@protoc_insertion_point(class_scope:Zee.Proto.Packet.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  int packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// int32 PacketSize = 1;
inline void Header::clear_packetsize() {
  packetsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::_internal_packetsize() const {
  return packetsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::packetsize() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Packet.Header.PacketSize)
  return _internal_packetsize();
}
inline void Header::_internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packetsize_ = value;
}
inline void Header::set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packetsize(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Packet.Header.PacketSize)
}

// int32 Point = 2;
inline void Header::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::point() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Packet.Header.Point)
  return _internal_point();
}
inline void Header::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void Header::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Packet.Header.Point)
}

// int32 Sequence = 3;
inline void Header::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::sequence() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Packet.Header.Sequence)
  return _internal_sequence();
}
inline void Header::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void Header::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Packet.Header.Sequence)
}

// .Zee.Proto.Packet.Type PacketType = 4;
inline void Header::clear_packettype() {
  packettype_ = 0;
}
inline ::Zee::Proto::Packet::Type Header::_internal_packettype() const {
  return static_cast< ::Zee::Proto::Packet::Type >(packettype_);
}
inline ::Zee::Proto::Packet::Type Header::packettype() const {
  // @@protoc_insertion_point(field_get:Zee.Proto.Packet.Header.PacketType)
  return _internal_packettype();
}
inline void Header::_internal_set_packettype(::Zee::Proto::Packet::Type value) {
  
  packettype_ = value;
}
inline void Header::set_packettype(::Zee::Proto::Packet::Type value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:Zee.Proto.Packet.Header.PacketType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet
}  // namespace Proto
}  // namespace Zee

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Zee::Proto::Packet::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Zee::Proto::Packet::Type>() {
  return ::Zee::Proto::Packet::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
